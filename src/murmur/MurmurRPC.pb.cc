// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MurmurRPC.proto

#include "MurmurRPC.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_MurmurRPC_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Request_Authenticate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Request_Find;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Request_Query;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Response_Deregister;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Response_Update;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Config_FieldsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Uptime;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Version;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ACL_Group;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Request_Deregister;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Request_Register;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Request_Update;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Authenticate;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Find;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Initialize;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Query;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Register;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Ban;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Channel;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DatabaseUser;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Log;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Server;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ACL;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_TextMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Tree;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MurmurRPC_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_User;
}  // namespace protobuf_MurmurRPC_2eproto
namespace MurmurRPC {
class VoidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Void>
      _instance;
} _Void_default_instance_;
class VersionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Version>
      _instance;
} _Version_default_instance_;
class UptimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Uptime>
      _instance;
} _Uptime_default_instance_;
class Server_EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server_Event>
      _instance;
} _Server_Event_default_instance_;
class Server_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server_Query>
      _instance;
} _Server_Query_default_instance_;
class Server_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server_List>
      _instance;
} _Server_List_default_instance_;
class ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Server>
      _instance;
} _Server_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Event>
      _instance;
} _Event_default_instance_;
class ContextActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ContextAction>
      _instance;
} _ContextAction_default_instance_;
class TextMessage_FilterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextMessage_Filter>
      _instance;
} _TextMessage_Filter_default_instance_;
class TextMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TextMessage>
      _instance;
} _TextMessage_default_instance_;
class Log_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Log_Query>
      _instance;
} _Log_Query_default_instance_;
class Log_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Log_List>
      _instance;
} _Log_List_default_instance_;
class LogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Log>
      _instance;
} _Log_default_instance_;
class Config_FieldsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config_FieldsEntry_DoNotUse>
      _instance;
} _Config_FieldsEntry_DoNotUse_default_instance_;
class Config_FieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config_Field>
      _instance;
} _Config_Field_default_instance_;
class ConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Config>
      _instance;
} _Config_default_instance_;
class Channel_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Channel_Query>
      _instance;
} _Channel_Query_default_instance_;
class Channel_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Channel_List>
      _instance;
} _Channel_List_default_instance_;
class ChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Channel>
      _instance;
} _Channel_default_instance_;
class User_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_Query>
      _instance;
} _User_Query_default_instance_;
class User_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_List>
      _instance;
} _User_List_default_instance_;
class User_KickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User_Kick>
      _instance;
} _User_Kick_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User>
      _instance;
} _User_default_instance_;
class Tree_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tree_Query>
      _instance;
} _Tree_Query_default_instance_;
class TreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tree>
      _instance;
} _Tree_default_instance_;
class Ban_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ban_Query>
      _instance;
} _Ban_Query_default_instance_;
class Ban_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ban_List>
      _instance;
} _Ban_List_default_instance_;
class BanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Ban>
      _instance;
} _Ban_default_instance_;
class ACL_GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL_Group>
      _instance;
} _ACL_Group_default_instance_;
class ACL_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL_Query>
      _instance;
} _ACL_Query_default_instance_;
class ACL_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL_List>
      _instance;
} _ACL_List_default_instance_;
class ACL_TemporaryGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL_TemporaryGroup>
      _instance;
} _ACL_TemporaryGroup_default_instance_;
class ACLDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ACL>
      _instance;
} _ACL_default_instance_;
class Authenticator_Request_AuthenticateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request_Authenticate>
      _instance;
} _Authenticator_Request_Authenticate_default_instance_;
class Authenticator_Request_FindDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request_Find>
      _instance;
} _Authenticator_Request_Find_default_instance_;
class Authenticator_Request_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request_Query>
      _instance;
} _Authenticator_Request_Query_default_instance_;
class Authenticator_Request_RegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request_Register>
      _instance;
} _Authenticator_Request_Register_default_instance_;
class Authenticator_Request_DeregisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request_Deregister>
      _instance;
} _Authenticator_Request_Deregister_default_instance_;
class Authenticator_Request_UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request_Update>
      _instance;
} _Authenticator_Request_Update_default_instance_;
class Authenticator_RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Request>
      _instance;
} _Authenticator_Request_default_instance_;
class Authenticator_Response_InitializeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Initialize>
      _instance;
} _Authenticator_Response_Initialize_default_instance_;
class Authenticator_Response_AuthenticateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Authenticate>
      _instance;
} _Authenticator_Response_Authenticate_default_instance_;
class Authenticator_Response_FindDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Find>
      _instance;
} _Authenticator_Response_Find_default_instance_;
class Authenticator_Response_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Query>
      _instance;
} _Authenticator_Response_Query_default_instance_;
class Authenticator_Response_RegisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Register>
      _instance;
} _Authenticator_Response_Register_default_instance_;
class Authenticator_Response_DeregisterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Deregister>
      _instance;
} _Authenticator_Response_Deregister_default_instance_;
class Authenticator_Response_UpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response_Update>
      _instance;
} _Authenticator_Response_Update_default_instance_;
class Authenticator_ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator_Response>
      _instance;
} _Authenticator_Response_default_instance_;
class AuthenticatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Authenticator>
      _instance;
} _Authenticator_default_instance_;
class DatabaseUser_QueryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatabaseUser_Query>
      _instance;
} _DatabaseUser_Query_default_instance_;
class DatabaseUser_ListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatabaseUser_List>
      _instance;
} _DatabaseUser_List_default_instance_;
class DatabaseUser_VerifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatabaseUser_Verify>
      _instance;
} _DatabaseUser_Verify_default_instance_;
class DatabaseUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DatabaseUser>
      _instance;
} _DatabaseUser_default_instance_;
class RedirectWhisperGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RedirectWhisperGroup>
      _instance;
} _RedirectWhisperGroup_default_instance_;
}  // namespace MurmurRPC
namespace protobuf_MurmurRPC_2eproto {
static void InitDefaultsVoid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Void_default_instance_;
    new (ptr) ::MurmurRPC::Void();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Void::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Void =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVoid}, {}};

static void InitDefaultsVersion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Version_default_instance_;
    new (ptr) ::MurmurRPC::Version();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Version::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Version =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersion}, {}};

static void InitDefaultsUptime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Uptime_default_instance_;
    new (ptr) ::MurmurRPC::Uptime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Uptime::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Uptime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUptime}, {}};

static void InitDefaultsServer_Event() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Server_Event_default_instance_;
    new (ptr) ::MurmurRPC::Server_Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Server_Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Server_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsServer_Event}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,
      &protobuf_MurmurRPC_2eproto::scc_info_TextMessage.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,}};

static void InitDefaultsServer_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Server_Query_default_instance_;
    new (ptr) ::MurmurRPC::Server_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Server_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Server_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsServer_Query}, {}};

static void InitDefaultsServer_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Server_List_default_instance_;
    new (ptr) ::MurmurRPC::Server_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Server_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Server_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServer_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsServer() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Server_default_instance_;
    new (ptr) ::MurmurRPC::Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Server::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Server =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsServer}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Uptime.base,}};

static void InitDefaultsEvent() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Event_default_instance_;
    new (ptr) ::MurmurRPC::Event();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Event::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Event =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEvent}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsContextAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_ContextAction_default_instance_;
    new (ptr) ::MurmurRPC::ContextAction();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::ContextAction::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ContextAction =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsContextAction}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,}};

static void InitDefaultsTextMessage_Filter() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_TextMessage_Filter_default_instance_;
    new (ptr) ::MurmurRPC::TextMessage_Filter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::TextMessage_Filter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TextMessage_Filter =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTextMessage_Filter}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_TextMessage.base,}};

static void InitDefaultsTextMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_TextMessage_default_instance_;
    new (ptr) ::MurmurRPC::TextMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::TextMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_TextMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTextMessage}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,}};

static void InitDefaultsLog_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Log_Query_default_instance_;
    new (ptr) ::MurmurRPC::Log_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Log_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Log_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLog_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsLog_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Log_List_default_instance_;
    new (ptr) ::MurmurRPC::Log_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Log_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Log_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLog_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Log.base,}};

static void InitDefaultsLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Log_default_instance_;
    new (ptr) ::MurmurRPC::Log();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Log::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Log =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLog}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsConfig_FieldsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Config_FieldsEntry_DoNotUse_default_instance_;
    new (ptr) ::MurmurRPC::Config_FieldsEntry_DoNotUse();
  }
  ::MurmurRPC::Config_FieldsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Config_FieldsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConfig_FieldsEntry_DoNotUse}, {}};

static void InitDefaultsConfig_Field() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Config_Field_default_instance_;
    new (ptr) ::MurmurRPC::Config_Field();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Config_Field::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Config_Field =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConfig_Field}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Config_default_instance_;
    new (ptr) ::MurmurRPC::Config();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Config::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Config =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsConfig}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Config_FieldsEntry_DoNotUse.base,}};

static void InitDefaultsChannel_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Channel_Query_default_instance_;
    new (ptr) ::MurmurRPC::Channel_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Channel_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Channel_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChannel_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsChannel_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Channel_List_default_instance_;
    new (ptr) ::MurmurRPC::Channel_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Channel_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Channel_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChannel_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,}};

static void InitDefaultsChannel() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Channel_default_instance_;
    new (ptr) ::MurmurRPC::Channel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Channel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Channel =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChannel}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsUser_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_User_Query_default_instance_;
    new (ptr) ::MurmurRPC::User_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::User_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_User_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUser_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsUser_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_User_List_default_instance_;
    new (ptr) ::MurmurRPC::User_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::User_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_User_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUser_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,}};

static void InitDefaultsUser_Kick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_User_Kick_default_instance_;
    new (ptr) ::MurmurRPC::User_Kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::User_Kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_User_Kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUser_Kick}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,}};

static void InitDefaultsUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_User_default_instance_;
    new (ptr) ::MurmurRPC::User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_User =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsUser}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Version.base,}};

static void InitDefaultsTree_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Tree_Query_default_instance_;
    new (ptr) ::MurmurRPC::Tree_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Tree_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tree_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTree_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsTree() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Tree_default_instance_;
    new (ptr) ::MurmurRPC::Tree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Tree::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Tree =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsTree}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,}};

static void InitDefaultsBan_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Ban_Query_default_instance_;
    new (ptr) ::MurmurRPC::Ban_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Ban_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Ban_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBan_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsBan_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Ban_List_default_instance_;
    new (ptr) ::MurmurRPC::Ban_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Ban_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Ban_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBan_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Ban.base,}};

static void InitDefaultsBan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Ban_default_instance_;
    new (ptr) ::MurmurRPC::Ban();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Ban::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Ban =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBan}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsACL_Group() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_ACL_Group_default_instance_;
    new (ptr) ::MurmurRPC::ACL_Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::ACL_Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ACL_Group =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsACL_Group}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsACL_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_ACL_Query_default_instance_;
    new (ptr) ::MurmurRPC::ACL_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::ACL_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ACL_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsACL_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,}};

static void InitDefaultsACL_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_ACL_List_default_instance_;
    new (ptr) ::MurmurRPC::ACL_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::ACL_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ACL_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsACL_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,
      &protobuf_MurmurRPC_2eproto::scc_info_ACL.base,
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_Group.base,}};

static void InitDefaultsACL_TemporaryGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_ACL_TemporaryGroup_default_instance_;
    new (ptr) ::MurmurRPC::ACL_TemporaryGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::ACL_TemporaryGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_ACL_TemporaryGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsACL_TemporaryGroup}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,}};

static void InitDefaultsACL() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_ACL_default_instance_;
    new (ptr) ::MurmurRPC::ACL();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::ACL::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ACL =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsACL}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_Group.base,}};

static void InitDefaultsAuthenticator_Request_Authenticate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_Authenticate_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request_Authenticate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request_Authenticate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Request_Authenticate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticator_Request_Authenticate}, {}};

static void InitDefaultsAuthenticator_Request_Find() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_Find_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request_Find();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request_Find::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Request_Find =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticator_Request_Find}, {}};

static void InitDefaultsAuthenticator_Request_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_Query_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Request_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticator_Request_Query}, {}};

static void InitDefaultsAuthenticator_Request_Register() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_Register_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request_Register();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request_Register::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Request_Register =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Request_Register}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsAuthenticator_Request_Deregister() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_Deregister_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request_Deregister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request_Deregister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Request_Deregister =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Request_Deregister}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsAuthenticator_Request_Update() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_Update_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request_Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request_Update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Request_Update =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Request_Update}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsAuthenticator_Request() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Request_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<6> scc_info_Authenticator_Request =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsAuthenticator_Request}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Authenticate.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Find.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Query.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Register.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Deregister.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Update.base,}};

static void InitDefaultsAuthenticator_Response_Initialize() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Initialize_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Initialize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Initialize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Initialize =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Response_Initialize}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsAuthenticator_Response_Authenticate() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Authenticate_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Authenticate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Authenticate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Authenticate =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Response_Authenticate}, {
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_Group.base,}};

static void InitDefaultsAuthenticator_Response_Find() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Find_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Find();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Find::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Find =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Response_Find}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsAuthenticator_Response_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Query_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Response_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsAuthenticator_Response_Register() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Register_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Register();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Register::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Authenticator_Response_Register =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAuthenticator_Response_Register}, {
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsAuthenticator_Response_Deregister() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Deregister_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Deregister();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Deregister::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Response_Deregister =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticator_Response_Deregister}, {}};

static void InitDefaultsAuthenticator_Response_Update() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_Update_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response_Update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response_Update::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator_Response_Update =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticator_Response_Update}, {}};

static void InitDefaultsAuthenticator_Response() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_Response_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator_Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator_Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Authenticator_Response =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsAuthenticator_Response}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Initialize.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Authenticate.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Find.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Query.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Register.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Deregister.base,
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Update.base,}};

static void InitDefaultsAuthenticator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_Authenticator_default_instance_;
    new (ptr) ::MurmurRPC::Authenticator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::Authenticator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Authenticator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthenticator}, {}};

static void InitDefaultsDatabaseUser_Query() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_DatabaseUser_Query_default_instance_;
    new (ptr) ::MurmurRPC::DatabaseUser_Query();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::DatabaseUser_Query::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DatabaseUser_Query =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDatabaseUser_Query}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsDatabaseUser_List() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_DatabaseUser_List_default_instance_;
    new (ptr) ::MurmurRPC::DatabaseUser_List();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::DatabaseUser_List::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_DatabaseUser_List =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDatabaseUser_List}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base,}};

static void InitDefaultsDatabaseUser_Verify() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_DatabaseUser_Verify_default_instance_;
    new (ptr) ::MurmurRPC::DatabaseUser_Verify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::DatabaseUser_Verify::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DatabaseUser_Verify =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDatabaseUser_Verify}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsDatabaseUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_DatabaseUser_default_instance_;
    new (ptr) ::MurmurRPC::DatabaseUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::DatabaseUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DatabaseUser =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDatabaseUser}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,}};

static void InitDefaultsRedirectWhisperGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MurmurRPC::_RedirectWhisperGroup_default_instance_;
    new (ptr) ::MurmurRPC::RedirectWhisperGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MurmurRPC::RedirectWhisperGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RedirectWhisperGroup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRedirectWhisperGroup}, {
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base,
      &protobuf_MurmurRPC_2eproto::scc_info_User.base,
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_Group.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Void.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Version.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Uptime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Server_Event.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Server_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Server_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Server.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Event.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ContextAction.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextMessage_Filter.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TextMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Log_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Log_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Log.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config_FieldsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config_Field.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Config.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Channel_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Channel_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Channel.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User_Kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tree_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tree.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ban_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ban_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Ban.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL_Group.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL_TemporaryGroup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ACL.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request_Authenticate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request_Find.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request_Register.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request_Deregister.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request_Update.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Request.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Initialize.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Authenticate.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Find.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Register.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Deregister.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response_Update.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator_Response.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Authenticator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatabaseUser_Query.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatabaseUser_List.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatabaseUser_Verify.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DatabaseUser.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RedirectWhisperGroup.base);
}

::google::protobuf::Metadata file_level_metadata[55];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Void, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Void, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Version, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Version, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Version, release_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Version, os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Version, os_version_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Uptime, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Uptime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Uptime, secs_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Event, channel_),
  0,
  4,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server_List, servers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Server, uptime_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Event, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Event, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Event, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ContextAction, channel_),
  2,
  6,
  0,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage_Filter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage_Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage_Filter, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage_Filter, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage_Filter, message_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, trees_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::TextMessage, text_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_Query, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_Query, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_Query, max_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log_List, entries_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Log, text_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_FieldsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_FieldsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_FieldsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_Field, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_Field, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_Field, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config_Field, value_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Config, fields_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_Query, server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_List, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel_List, channels_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, links_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, temporary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Channel, position_),
  2,
  4,
  0,
  3,
  ~0u,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Query, server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_List, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_List, users_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Kick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Kick, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Kick, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Kick, actor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User_Kick, reason_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, mute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, deaf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, suppress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, priority_speaker_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, self_mute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, self_deaf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, recording_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, online_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, idle_secs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, plugin_context_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, plugin_identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, texture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, tcp_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, udp_ping_msecs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::User, tcp_ping_msecs_),
  6,
  9,
  10,
  0,
  11,
  12,
  13,
  14,
  16,
  17,
  18,
  7,
  15,
  20,
  21,
  8,
  1,
  2,
  3,
  4,
  5,
  19,
  22,
  23,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree_Query, server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Tree, users_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_Query, server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_List, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban_List, bans_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Ban, duration_secs_),
  4,
  0,
  7,
  1,
  2,
  3,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, inherited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, inherit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, inheritable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, users_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, users_remove_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Group, users_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Query, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Query, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_Query, channel_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, acls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_List, inherit_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_TemporaryGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_TemporaryGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_TemporaryGroup, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_TemporaryGroup, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_TemporaryGroup, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL_TemporaryGroup, name_),
  1,
  2,
  3,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, apply_here_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, apply_subs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, inherited_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, allow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::ACL, deny_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, certificates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, certificate_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Authenticate, strong_certificate_),
  0,
  1,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Find, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Find, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Find, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Find, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Query, filter_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Register, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Register, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Deregister, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Deregister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Deregister, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Update, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request_Update, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, authenticate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, find_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, register__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, deregister_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Request, update_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Initialize, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Initialize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Initialize, server_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Authenticate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Authenticate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Authenticate, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Authenticate, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Authenticate, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Authenticate, groups_),
  1,
  2,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Find, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Find, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Find, user_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Query, users_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Register, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Register, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Register, user_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Deregister, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Deregister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Deregister, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Update, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response_Update, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, initialize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, authenticate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, find_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, query_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, register__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, deregister_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator_Response, update_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::Authenticator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Query, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Query, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Query, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Query, filter_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_List, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_List, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_List, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_List, users_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Verify, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Verify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Verify, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Verify, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser_Verify, password_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, comment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, last_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::DatabaseUser, texture_),
  7,
  8,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::RedirectWhisperGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::RedirectWhisperGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::RedirectWhisperGroup, server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::RedirectWhisperGroup, user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::RedirectWhisperGroup, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MurmurRPC::RedirectWhisperGroup, target_),
  0,
  1,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 5, sizeof(::MurmurRPC::Void)},
  { 5, 14, sizeof(::MurmurRPC::Version)},
  { 18, 24, sizeof(::MurmurRPC::Uptime)},
  { 25, 35, sizeof(::MurmurRPC::Server_Event)},
  { 40, 45, sizeof(::MurmurRPC::Server_Query)},
  { 45, 51, sizeof(::MurmurRPC::Server_List)},
  { 52, 60, sizeof(::MurmurRPC::Server)},
  { 63, 70, sizeof(::MurmurRPC::Event)},
  { 72, 84, sizeof(::MurmurRPC::ContextAction)},
  { 91, 99, sizeof(::MurmurRPC::TextMessage_Filter)},
  { 102, 113, sizeof(::MurmurRPC::TextMessage)},
  { 119, 127, sizeof(::MurmurRPC::Log_Query)},
  { 130, 140, sizeof(::MurmurRPC::Log_List)},
  { 145, 153, sizeof(::MurmurRPC::Log)},
  { 156, 163, sizeof(::MurmurRPC::Config_FieldsEntry_DoNotUse)},
  { 165, 173, sizeof(::MurmurRPC::Config_Field)},
  { 176, 183, sizeof(::MurmurRPC::Config)},
  { 185, 191, sizeof(::MurmurRPC::Channel_Query)},
  { 192, 199, sizeof(::MurmurRPC::Channel_List)},
  { 201, 214, sizeof(::MurmurRPC::Channel)},
  { 222, 228, sizeof(::MurmurRPC::User_Query)},
  { 229, 236, sizeof(::MurmurRPC::User_List)},
  { 238, 247, sizeof(::MurmurRPC::User_Kick)},
  { 251, 280, sizeof(::MurmurRPC::User)},
  { 304, 310, sizeof(::MurmurRPC::Tree_Query)},
  { 311, 320, sizeof(::MurmurRPC::Tree)},
  { 324, 330, sizeof(::MurmurRPC::Ban_Query)},
  { 331, 338, sizeof(::MurmurRPC::Ban_List)},
  { 340, 353, sizeof(::MurmurRPC::Ban)},
  { 361, 373, sizeof(::MurmurRPC::ACL_Group)},
  { 380, 388, sizeof(::MurmurRPC::ACL_Query)},
  { 391, 401, sizeof(::MurmurRPC::ACL_List)},
  { 406, 415, sizeof(::MurmurRPC::ACL_TemporaryGroup)},
  { 419, 431, sizeof(::MurmurRPC::ACL)},
  { 438, 448, sizeof(::MurmurRPC::Authenticator_Request_Authenticate)},
  { 453, 460, sizeof(::MurmurRPC::Authenticator_Request_Find)},
  { 462, 468, sizeof(::MurmurRPC::Authenticator_Request_Query)},
  { 469, 475, sizeof(::MurmurRPC::Authenticator_Request_Register)},
  { 476, 482, sizeof(::MurmurRPC::Authenticator_Request_Deregister)},
  { 483, 489, sizeof(::MurmurRPC::Authenticator_Request_Update)},
  { 490, 501, sizeof(::MurmurRPC::Authenticator_Request)},
  { 507, 513, sizeof(::MurmurRPC::Authenticator_Response_Initialize)},
  { 514, 523, sizeof(::MurmurRPC::Authenticator_Response_Authenticate)},
  { 527, 533, sizeof(::MurmurRPC::Authenticator_Response_Find)},
  { 534, 540, sizeof(::MurmurRPC::Authenticator_Response_Query)},
  { 541, 548, sizeof(::MurmurRPC::Authenticator_Response_Register)},
  { 550, 556, sizeof(::MurmurRPC::Authenticator_Response_Deregister)},
  { 557, 563, sizeof(::MurmurRPC::Authenticator_Response_Update)},
  { 564, 576, sizeof(::MurmurRPC::Authenticator_Response)},
  { 583, 588, sizeof(::MurmurRPC::Authenticator)},
  { 588, 595, sizeof(::MurmurRPC::DatabaseUser_Query)},
  { 597, 604, sizeof(::MurmurRPC::DatabaseUser_List)},
  { 606, 614, sizeof(::MurmurRPC::DatabaseUser_Verify)},
  { 617, 631, sizeof(::MurmurRPC::DatabaseUser)},
  { 640, 649, sizeof(::MurmurRPC::RedirectWhisperGroup)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Void_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Version_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Uptime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Server_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Server_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Server_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Event_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_ContextAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_TextMessage_Filter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_TextMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Log_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Log_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Config_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Config_Field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Config_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Channel_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Channel_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Channel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_User_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_User_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_User_Kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Tree_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Tree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Ban_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Ban_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Ban_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_ACL_Group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_ACL_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_ACL_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_ACL_TemporaryGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_ACL_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_Authenticate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_Find_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_Register_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_Deregister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Initialize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Authenticate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Find_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Register_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Deregister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_Update_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_Response_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_Authenticator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_DatabaseUser_Query_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_DatabaseUser_List_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_DatabaseUser_Verify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_DatabaseUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::MurmurRPC::_RedirectWhisperGroup_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MurmurRPC.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 55);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017MurmurRPC.proto\022\tMurmurRPC\"\006\n\004Void\"K\n\007"
      "Version\022\017\n\007version\030\001 \001(\r\022\017\n\007release\030\002 \001("
      "\t\022\n\n\002os\030\003 \001(\t\022\022\n\nos_version\030\004 \001(\t\"\026\n\006Upt"
      "ime\022\014\n\004secs\030\001 \001(\004\"\341\003\n\006Server\022\n\n\002id\030\001 \002(\r"
      "\022\017\n\007running\030\002 \001(\010\022!\n\006uptime\030\003 \001(\0132\021.Murm"
      "urRPC.Uptime\032\341\002\n\005Event\022!\n\006server\030\001 \001(\0132\021"
      ".MurmurRPC.Server\022*\n\004type\030\002 \001(\0162\034.Murmur"
      "RPC.Server.Event.Type\022\035\n\004user\030\003 \001(\0132\017.Mu"
      "rmurRPC.User\022\'\n\007message\030\004 \001(\0132\026.MurmurRP"
      "C.TextMessage\022#\n\007channel\030\005 \001(\0132\022.MurmurR"
      "PC.Channel\"\233\001\n\004Type\022\021\n\rUserConnected\020\000\022\024"
      "\n\020UserDisconnected\020\001\022\024\n\020UserStateChanged"
      "\020\002\022\023\n\017UserTextMessage\020\003\022\022\n\016ChannelCreate"
      "d\020\004\022\022\n\016ChannelRemoved\020\005\022\027\n\023ChannelStateC"
      "hanged\020\006\032\007\n\005Query\032*\n\004List\022\"\n\007servers\030\001 \003"
      "(\0132\021.MurmurRPC.Server\"}\n\005Event\022!\n\006server"
      "\030\001 \001(\0132\021.MurmurRPC.Server\022#\n\004type\030\002 \001(\0162"
      "\025.MurmurRPC.Event.Type\",\n\004Type\022\021\n\rServer"
      "Stopped\020\000\022\021\n\rServerStarted\020\001\"\363\001\n\rContext"
      "Action\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Serve"
      "r\022\017\n\007context\030\002 \001(\r\022\016\n\006action\030\003 \001(\t\022\014\n\004te"
      "xt\030\004 \001(\t\022\036\n\005actor\030\005 \001(\0132\017.MurmurRPC.User"
      "\022\035\n\004user\030\006 \001(\0132\017.MurmurRPC.User\022#\n\007chann"
      "el\030\007 \001(\0132\022.MurmurRPC.Channel\",\n\007Context\022"
      "\n\n\006Server\020\001\022\013\n\007Channel\020\002\022\010\n\004User\020\004\"\200\003\n\013T"
      "extMessage\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.S"
      "erver\022\036\n\005actor\030\002 \001(\0132\017.MurmurRPC.User\022\036\n"
      "\005users\030\003 \003(\0132\017.MurmurRPC.User\022$\n\010channel"
      "s\030\004 \003(\0132\022.MurmurRPC.Channel\022!\n\005trees\030\005 \003"
      "(\0132\022.MurmurRPC.Channel\022\014\n\004text\030\006 \001(\t\032\266\001\n"
      "\006Filter\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Serv"
      "er\0224\n\006action\030\002 \001(\0162$.MurmurRPC.TextMessa"
      "ge.Filter.Action\022\'\n\007message\030\003 \001(\0132\026.Murm"
      "urRPC.TextMessage\"*\n\006Action\022\n\n\006Accept\020\000\022"
      "\n\n\006Reject\020\001\022\010\n\004Drop\020\002\"\204\002\n\003Log\022!\n\006server\030"
      "\001 \001(\0132\021.MurmurRPC.Server\022\021\n\ttimestamp\030\002 "
      "\001(\003\022\014\n\004text\030\003 \001(\t\032D\n\005Query\022!\n\006server\030\001 \001"
      "(\0132\021.MurmurRPC.Server\022\013\n\003min\030\002 \001(\r\022\013\n\003ma"
      "x\030\003 \001(\r\032s\n\004List\022!\n\006server\030\001 \001(\0132\021.Murmur"
      "RPC.Server\022\r\n\005total\030\002 \001(\r\022\013\n\003min\030\003 \001(\r\022\013"
      "\n\003max\030\004 \001(\r\022\037\n\007entries\030\005 \003(\0132\016.MurmurRPC"
      ".Log\"\321\001\n\006Config\022!\n\006server\030\001 \001(\0132\021.Murmur"
      "RPC.Server\022-\n\006fields\030\002 \003(\0132\035.MurmurRPC.C"
      "onfig.FieldsEntry\032-\n\013FieldsEntry\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032F\n\005Field\022!\n\006ser"
      "ver\030\001 \001(\0132\021.MurmurRPC.Server\022\013\n\003key\030\002 \001("
      "\t\022\r\n\005value\030\003 \001(\t\"\304\002\n\007Channel\022!\n\006server\030\001"
      " \001(\0132\021.MurmurRPC.Server\022\n\n\002id\030\002 \001(\r\022\014\n\004n"
      "ame\030\003 \001(\t\022\"\n\006parent\030\004 \001(\0132\022.MurmurRPC.Ch"
      "annel\022!\n\005links\030\005 \003(\0132\022.MurmurRPC.Channel"
      "\022\023\n\013description\030\006 \001(\t\022\021\n\ttemporary\030\007 \001(\010"
      "\022\020\n\010position\030\010 \001(\005\032*\n\005Query\022!\n\006server\030\001 "
      "\001(\0132\021.MurmurRPC.Server\032O\n\004List\022!\n\006server"
      "\030\001 \001(\0132\021.MurmurRPC.Server\022$\n\010channels\030\002 "
      "\003(\0132\022.MurmurRPC.Channel\"\365\005\n\004User\022!\n\006serv"
      "er\030\001 \001(\0132\021.MurmurRPC.Server\022\017\n\007session\030\002"
      " \001(\r\022\n\n\002id\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\014\n\004mute\030\005"
      " \001(\010\022\014\n\004deaf\030\006 \001(\010\022\020\n\010suppress\030\007 \001(\010\022\030\n\020"
      "priority_speaker\030\010 \001(\010\022\021\n\tself_mute\030\t \001("
      "\010\022\021\n\tself_deaf\030\n \001(\010\022\021\n\trecording\030\013 \001(\010\022"
      "#\n\007channel\030\014 \001(\0132\022.MurmurRPC.Channel\022\023\n\013"
      "online_secs\030\r \001(\r\022\021\n\tidle_secs\030\016 \001(\r\022\025\n\r"
      "bytes_per_sec\030\017 \001(\r\022#\n\007version\030\020 \001(\0132\022.M"
      "urmurRPC.Version\022\026\n\016plugin_context\030\021 \001(\014"
      "\022\027\n\017plugin_identity\030\022 \001(\t\022\017\n\007comment\030\023 \001"
      "(\t\022\017\n\007texture\030\024 \001(\014\022\017\n\007address\030\025 \001(\014\022\020\n\010"
      "tcp_only\030\026 \001(\010\022\026\n\016udp_ping_msecs\030\027 \001(\002\022\026"
      "\n\016tcp_ping_msecs\030\030 \001(\002\032*\n\005Query\022!\n\006serve"
      "r\030\001 \001(\0132\021.MurmurRPC.Server\032I\n\004List\022!\n\006se"
      "rver\030\001 \001(\0132\021.MurmurRPC.Server\022\036\n\005users\030\002"
      " \003(\0132\017.MurmurRPC.User\032x\n\004Kick\022!\n\006server\030"
      "\001 \001(\0132\021.MurmurRPC.Server\022\035\n\004user\030\002 \001(\0132\017"
      ".MurmurRPC.User\022\036\n\005actor\030\003 \001(\0132\017.MurmurR"
      "PC.User\022\016\n\006reason\030\004 \001(\t\"\275\001\n\004Tree\022!\n\006serv"
      "er\030\001 \001(\0132\021.MurmurRPC.Server\022#\n\007channel\030\002"
      " \001(\0132\022.MurmurRPC.Channel\022!\n\010children\030\003 \003"
      "(\0132\017.MurmurRPC.Tree\022\036\n\005users\030\004 \003(\0132\017.Mur"
      "murRPC.User\032*\n\005Query\022!\n\006server\030\001 \001(\0132\021.M"
      "urmurRPC.Server\"\216\002\n\003Ban\022!\n\006server\030\001 \001(\0132"
      "\021.MurmurRPC.Server\022\017\n\007address\030\002 \001(\014\022\014\n\004b"
      "its\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\022\014\n\004hash\030\005 \001(\t\022\016\n"
      "\006reason\030\006 \001(\t\022\r\n\005start\030\007 \001(\003\022\025\n\rduration"
      "_secs\030\010 \001(\003\032*\n\005Query\022!\n\006server\030\001 \001(\0132\021.M"
      "urmurRPC.Server\032G\n\004List\022!\n\006server\030\001 \001(\0132"
      "\021.MurmurRPC.Server\022\034\n\004bans\030\002 \003(\0132\016.Murmu"
      "rRPC.Ban\"\226\010\n\003ACL\022\022\n\napply_here\030\003 \001(\010\022\022\n\n"
      "apply_subs\030\004 \001(\010\022\021\n\tinherited\030\005 \001(\010\022%\n\004u"
      "ser\030\006 \001(\0132\027.MurmurRPC.DatabaseUser\022#\n\005gr"
      "oup\030\007 \001(\0132\024.MurmurRPC.ACL.Group\022\r\n\005allow"
      "\030\010 \001(\r\022\014\n\004deny\030\t \001(\r\032\321\001\n\005Group\022\014\n\004name\030\001"
      " \001(\t\022\021\n\tinherited\030\002 \001(\010\022\017\n\007inherit\030\003 \001(\010"
      "\022\023\n\013inheritable\030\004 \001(\010\022*\n\tusers_add\030\005 \003(\013"
      "2\027.MurmurRPC.DatabaseUser\022-\n\014users_remov"
      "e\030\006 \003(\0132\027.MurmurRPC.DatabaseUser\022&\n\005user"
      "s\030\007 \003(\0132\027.MurmurRPC.DatabaseUser\032n\n\005Quer"
      "y\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Server\022\035\n\004"
      "user\030\002 \001(\0132\017.MurmurRPC.User\022#\n\007channel\030\003"
      " \001(\0132\022.MurmurRPC.Channel\032\243\001\n\004List\022!\n\006ser"
      "ver\030\001 \001(\0132\021.MurmurRPC.Server\022#\n\007channel\030"
      "\002 \001(\0132\022.MurmurRPC.Channel\022\034\n\004acls\030\003 \003(\0132"
      "\016.MurmurRPC.ACL\022$\n\006groups\030\004 \003(\0132\024.Murmur"
      "RPC.ACL.Group\022\017\n\007inherit\030\005 \001(\010\032\205\001\n\016Tempo"
      "raryGroup\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Se"
      "rver\022#\n\007channel\030\002 \001(\0132\022.MurmurRPC.Channe"
      "l\022\035\n\004user\030\003 \001(\0132\017.MurmurRPC.User\022\014\n\004name"
      "\030\004 \001(\t\"\370\001\n\nPermission\022\010\n\004None\020\000\022\t\n\005Write"
      "\020\001\022\014\n\010Traverse\020\002\022\t\n\005Enter\020\004\022\t\n\005Speak\020\010\022\014"
      "\n\007Whisper\020\200\002\022\016\n\nMuteDeafen\020\020\022\010\n\004Move\020 \022\017"
      "\n\013MakeChannel\020@\022\031\n\024MakeTemporaryChannel\020"
      "\200\010\022\020\n\013LinkChannel\020\200\001\022\020\n\013TextMessage\020\200\004\022\n"
      "\n\004Kick\020\200\200\004\022\t\n\003Ban\020\200\200\010\022\016\n\010Register\020\200\200\020\022\022\n"
      "\014RegisterSelf\020\200\200 \"\360\r\n\rAuthenticator\032\301\005\n\007"
      "Request\022C\n\014authenticate\030\001 \001(\0132-.MurmurRP"
      "C.Authenticator.Request.Authenticate\0223\n\004"
      "find\030\002 \001(\0132%.MurmurRPC.Authenticator.Req"
      "uest.Find\0225\n\005query\030\003 \001(\0132&.MurmurRPC.Aut"
      "henticator.Request.Query\022;\n\010register\030\004 \001"
      "(\0132).MurmurRPC.Authenticator.Request.Reg"
      "ister\022\?\n\nderegister\030\005 \001(\0132+.MurmurRPC.Au"
      "thenticator.Request.Deregister\0227\n\006update"
      "\030\006 \001(\0132\'.MurmurRPC.Authenticator.Request"
      ".Update\032z\n\014Authenticate\022\014\n\004name\030\001 \001(\t\022\020\n"
      "\010password\030\002 \001(\t\022\024\n\014certificates\030\003 \003(\014\022\030\n"
      "\020certificate_hash\030\004 \001(\t\022\032\n\022strong_certif"
      "icate\030\005 \001(\010\032 \n\004Find\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030"
      "\002 \001(\t\032\027\n\005Query\022\016\n\006filter\030\001 \001(\t\0321\n\010Regist"
      "er\022%\n\004user\030\001 \001(\0132\027.MurmurRPC.DatabaseUse"
      "r\0323\n\nDeregister\022%\n\004user\030\001 \001(\0132\027.MurmurRP"
      "C.DatabaseUser\032/\n\006Update\022%\n\004user\030\001 \001(\0132\027"
      ".MurmurRPC.DatabaseUser\032\232\010\n\010Response\022@\n\n"
      "initialize\030\001 \001(\0132,.MurmurRPC.Authenticat"
      "or.Response.Initialize\022D\n\014authenticate\030\002"
      " \001(\0132..MurmurRPC.Authenticator.Response."
      "Authenticate\0224\n\004find\030\003 \001(\0132&.MurmurRPC.A"
      "uthenticator.Response.Find\0226\n\005query\030\004 \001("
      "\0132\'.MurmurRPC.Authenticator.Response.Que"
      "ry\022<\n\010register\030\005 \001(\0132*.MurmurRPC.Authent"
      "icator.Response.Register\022@\n\nderegister\030\006"
      " \001(\0132,.MurmurRPC.Authenticator.Response."
      "Deregister\0228\n\006update\030\007 \001(\0132(.MurmurRPC.A"
      "uthenticator.Response.Update\032/\n\nInitiali"
      "ze\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Server\032\210\001"
      "\n\014Authenticate\0228\n\006status\030\001 \001(\0162(.MurmurR"
      "PC.Authenticator.Response.Status\022\n\n\002id\030\002"
      " \001(\r\022\014\n\004name\030\003 \001(\t\022$\n\006groups\030\004 \003(\0132\024.Mur"
      "murRPC.ACL.Group\032-\n\004Find\022%\n\004user\030\001 \001(\0132\027"
      ".MurmurRPC.DatabaseUser\032/\n\005Query\022&\n\005user"
      "s\030\001 \003(\0132\027.MurmurRPC.DatabaseUser\032k\n\010Regi"
      "ster\0228\n\006status\030\001 \001(\0162(.MurmurRPC.Authent"
      "icator.Response.Status\022%\n\004user\030\002 \001(\0132\027.M"
      "urmurRPC.DatabaseUser\032F\n\nDeregister\0228\n\006s"
      "tatus\030\001 \001(\0162(.MurmurRPC.Authenticator.Re"
      "sponse.Status\032B\n\006Update\0228\n\006status\030\001 \001(\0162"
      "(.MurmurRPC.Authenticator.Response.Statu"
      "s\"I\n\006Status\022\017\n\013Fallthrough\020\000\022\013\n\007Success\020"
      "\001\022\013\n\007Failure\020\002\022\024\n\020TemporaryFailure\020\003\"\215\003\n"
      "\014DatabaseUser\022!\n\006server\030\001 \001(\0132\021.MurmurRP"
      "C.Server\022\n\n\002id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\r\n\005em"
      "ail\030\004 \001(\t\022\017\n\007comment\030\005 \001(\t\022\014\n\004hash\030\006 \001(\t"
      "\022\020\n\010password\030\007 \001(\t\022\023\n\013last_active\030\010 \001(\t\022"
      "\017\n\007texture\030\t \001(\014\032:\n\005Query\022!\n\006server\030\001 \001("
      "\0132\021.MurmurRPC.Server\022\016\n\006filter\030\002 \001(\t\032Q\n\004"
      "List\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Server\022"
      "&\n\005users\030\002 \003(\0132\027.MurmurRPC.DatabaseUser\032"
      "K\n\006Verify\022!\n\006server\030\001 \001(\0132\021.MurmurRPC.Se"
      "rver\022\014\n\004name\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\"\244\001\n"
      "\024RedirectWhisperGroup\022!\n\006server\030\001 \001(\0132\021."
      "MurmurRPC.Server\022\035\n\004user\030\002 \001(\0132\017.MurmurR"
      "PC.User\022$\n\006source\030\003 \001(\0132\024.MurmurRPC.ACL."
      "Group\022$\n\006target\030\004 \001(\0132\024.MurmurRPC.ACL.Gr"
      "oup2\207\026\n\002V1\022/\n\tGetUptime\022\017.MurmurRPC.Void"
      "\032\021.MurmurRPC.Uptime\0221\n\nGetVersion\022\017.Murm"
      "urRPC.Void\032\022.MurmurRPC.Version\022-\n\006Events"
      "\022\017.MurmurRPC.Void\032\020.MurmurRPC.Event0\001\0222\n"
      "\014ServerCreate\022\017.MurmurRPC.Void\032\021.MurmurR"
      "PC.Server\022>\n\013ServerQuery\022\027.MurmurRPC.Ser"
      "ver.Query\032\026.MurmurRPC.Server.List\0221\n\tSer"
      "verGet\022\021.MurmurRPC.Server\032\021.MurmurRPC.Se"
      "rver\0221\n\013ServerStart\022\021.MurmurRPC.Server\032\017"
      ".MurmurRPC.Void\0220\n\nServerStop\022\021.MurmurRP"
      "C.Server\032\017.MurmurRPC.Void\0222\n\014ServerRemov"
      "e\022\021.MurmurRPC.Server\032\017.MurmurRPC.Void\022<\n"
      "\014ServerEvents\022\021.MurmurRPC.Server\032\027.Murmu"
      "rRPC.Server.Event0\001\022=\n\020ContextActionAdd\022"
      "\030.MurmurRPC.ContextAction\032\017.MurmurRPC.Vo"
      "id\022@\n\023ContextActionRemove\022\030.MurmurRPC.Co"
      "ntextAction\032\017.MurmurRPC.Void\022K\n\023ContextA"
      "ctionEvents\022\030.MurmurRPC.ContextAction\032\030."
      "MurmurRPC.ContextAction0\001\022:\n\017TextMessage"
      "Send\022\026.MurmurRPC.TextMessage\032\017.MurmurRPC"
      ".Void\022U\n\021TextMessageFilter\022\035.MurmurRPC.T"
      "extMessage.Filter\032\035.MurmurRPC.TextMessag"
      "e.Filter(\0010\001\0225\n\010LogQuery\022\024.MurmurRPC.Log"
      ".Query\032\023.MurmurRPC.Log.List\0221\n\tConfigGet"
      "\022\021.MurmurRPC.Server\032\021.MurmurRPC.Config\022B"
      "\n\016ConfigGetField\022\027.MurmurRPC.Config.Fiel"
      "d\032\027.MurmurRPC.Config.Field\022:\n\016ConfigSetF"
      "ield\022\027.MurmurRPC.Config.Field\032\017.MurmurRP"
      "C.Void\0226\n\020ConfigGetDefault\022\017.MurmurRPC.V"
      "oid\032\021.MurmurRPC.Config\022A\n\014ChannelQuery\022\030"
      ".MurmurRPC.Channel.Query\032\027.MurmurRPC.Cha"
      "nnel.List\0224\n\nChannelGet\022\022.MurmurRPC.Chan"
      "nel\032\022.MurmurRPC.Channel\0224\n\nChannelAdd\022\022."
      "MurmurRPC.Channel\032\022.MurmurRPC.Channel\0224\n"
      "\rChannelRemove\022\022.MurmurRPC.Channel\032\017.Mur"
      "murRPC.Void\0227\n\rChannelUpdate\022\022.MurmurRPC"
      ".Channel\032\022.MurmurRPC.Channel\0228\n\tUserQuer"
      "y\022\025.MurmurRPC.User.Query\032\024.MurmurRPC.Use"
      "r.List\022+\n\007UserGet\022\017.MurmurRPC.User\032\017.Mur"
      "murRPC.User\022.\n\nUserUpdate\022\017.MurmurRPC.Us"
      "er\032\017.MurmurRPC.User\0221\n\010UserKick\022\024.Murmur"
      "RPC.User.Kick\032\017.MurmurRPC.Void\0223\n\tTreeQu"
      "ery\022\025.MurmurRPC.Tree.Query\032\017.MurmurRPC.T"
      "ree\0224\n\007BansGet\022\024.MurmurRPC.Ban.Query\032\023.M"
      "urmurRPC.Ban.List\022/\n\007BansSet\022\023.MurmurRPC"
      ".Ban.List\032\017.MurmurRPC.Void\0221\n\006ACLGet\022\022.M"
      "urmurRPC.Channel\032\023.MurmurRPC.ACL.List\022.\n"
      "\006ACLSet\022\023.MurmurRPC.ACL.List\032\017.MurmurRPC"
      ".Void\022B\n\032ACLGetEffectivePermissions\022\024.Mu"
      "rmurRPC.ACL.Query\032\016.MurmurRPC.ACL\022F\n\024ACL"
      "AddTemporaryGroup\022\035.MurmurRPC.ACL.Tempor"
      "aryGroup\032\017.MurmurRPC.Void\022I\n\027ACLRemoveTe"
      "mporaryGroup\022\035.MurmurRPC.ACL.TemporaryGr"
      "oup\032\017.MurmurRPC.Void\022^\n\023AuthenticatorStr"
      "eam\022!.MurmurRPC.Authenticator.Response\032 "
      ".MurmurRPC.Authenticator.Request(\0010\001\022P\n\021"
      "DatabaseUserQuery\022\035.MurmurRPC.DatabaseUs"
      "er.Query\032\034.MurmurRPC.DatabaseUser.List\022C"
      "\n\017DatabaseUserGet\022\027.MurmurRPC.DatabaseUs"
      "er\032\027.MurmurRPC.DatabaseUser\022>\n\022DatabaseU"
      "serUpdate\022\027.MurmurRPC.DatabaseUser\032\017.Mur"
      "murRPC.Void\022H\n\024DatabaseUserRegister\022\027.Mu"
      "rmurRPC.DatabaseUser\032\027.MurmurRPC.Databas"
      "eUser\022B\n\026DatabaseUserDeregister\022\027.Murmur"
      "RPC.DatabaseUser\032\017.MurmurRPC.Void\022M\n\022Dat"
      "abaseUserVerify\022\036.MurmurRPC.DatabaseUser"
      ".Verify\032\027.MurmurRPC.DatabaseUser\022K\n\027Redi"
      "rectWhisperGroupAdd\022\037.MurmurRPC.Redirect"
      "WhisperGroup\032\017.MurmurRPC.Void\022N\n\032Redirec"
      "tWhisperGroupRemove\022\037.MurmurRPC.Redirect"
      "WhisperGroup\032\017.MurmurRPC.Void"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 9629);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MurmurRPC.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MurmurRPC_2eproto
namespace MurmurRPC {
const ::google::protobuf::EnumDescriptor* Server_Event_Type_descriptor() {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MurmurRPC_2eproto::file_level_enum_descriptors[0];
}
bool Server_Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Server_Event_Type Server_Event::UserConnected;
const Server_Event_Type Server_Event::UserDisconnected;
const Server_Event_Type Server_Event::UserStateChanged;
const Server_Event_Type Server_Event::UserTextMessage;
const Server_Event_Type Server_Event::ChannelCreated;
const Server_Event_Type Server_Event::ChannelRemoved;
const Server_Event_Type Server_Event::ChannelStateChanged;
const Server_Event_Type Server_Event::Type_MIN;
const Server_Event_Type Server_Event::Type_MAX;
const int Server_Event::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Event_Type_descriptor() {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MurmurRPC_2eproto::file_level_enum_descriptors[1];
}
bool Event_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Event_Type Event::ServerStopped;
const Event_Type Event::ServerStarted;
const Event_Type Event::Type_MIN;
const Event_Type Event::Type_MAX;
const int Event::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ContextAction_Context_descriptor() {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MurmurRPC_2eproto::file_level_enum_descriptors[2];
}
bool ContextAction_Context_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ContextAction_Context ContextAction::Server;
const ContextAction_Context ContextAction::Channel;
const ContextAction_Context ContextAction::User;
const ContextAction_Context ContextAction::Context_MIN;
const ContextAction_Context ContextAction::Context_MAX;
const int ContextAction::Context_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TextMessage_Filter_Action_descriptor() {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MurmurRPC_2eproto::file_level_enum_descriptors[3];
}
bool TextMessage_Filter_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TextMessage_Filter_Action TextMessage_Filter::Accept;
const TextMessage_Filter_Action TextMessage_Filter::Reject;
const TextMessage_Filter_Action TextMessage_Filter::Drop;
const TextMessage_Filter_Action TextMessage_Filter::Action_MIN;
const TextMessage_Filter_Action TextMessage_Filter::Action_MAX;
const int TextMessage_Filter::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ACL_Permission_descriptor() {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MurmurRPC_2eproto::file_level_enum_descriptors[4];
}
bool ACL_Permission_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ACL_Permission ACL::None;
const ACL_Permission ACL::Write;
const ACL_Permission ACL::Traverse;
const ACL_Permission ACL::Enter;
const ACL_Permission ACL::Speak;
const ACL_Permission ACL::Whisper;
const ACL_Permission ACL::MuteDeafen;
const ACL_Permission ACL::Move;
const ACL_Permission ACL::MakeChannel;
const ACL_Permission ACL::MakeTemporaryChannel;
const ACL_Permission ACL::LinkChannel;
const ACL_Permission ACL::TextMessage;
const ACL_Permission ACL::Kick;
const ACL_Permission ACL::Ban;
const ACL_Permission ACL::Register;
const ACL_Permission ACL::RegisterSelf;
const ACL_Permission ACL::Permission_MIN;
const ACL_Permission ACL::Permission_MAX;
const int ACL::Permission_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Authenticator_Response_Status_descriptor() {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_MurmurRPC_2eproto::file_level_enum_descriptors[5];
}
bool Authenticator_Response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Authenticator_Response_Status Authenticator_Response::Fallthrough;
const Authenticator_Response_Status Authenticator_Response::Success;
const Authenticator_Response_Status Authenticator_Response::Failure;
const Authenticator_Response_Status Authenticator_Response::TemporaryFailure;
const Authenticator_Response_Status Authenticator_Response::Status_MIN;
const Authenticator_Response_Status Authenticator_Response::Status_MAX;
const int Authenticator_Response::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Void::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Void::Void()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Void.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Void)
}
Void::Void(const Void& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Void)
}

void Void::SharedCtor() {
}

Void::~Void() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Void)
  SharedDtor();
}

void Void::SharedDtor() {
}

void Void::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Void::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Void& Void::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Void.base);
  return *internal_default_instance();
}


void Void::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Void)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Void::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Void)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Void)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Void)
  return false;
#undef DO_
}

void Void::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Void)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Void)
}

::google::protobuf::uint8* Void::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Void)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Void)
  return target;
}

size_t Void::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Void)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Void::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Void)
  GOOGLE_DCHECK_NE(&from, this);
  const Void* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Void>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Void)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Void)
    MergeFrom(*source);
  }
}

void Void::MergeFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Void)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Void::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Void::CopyFrom(const Void& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Void)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Void::IsInitialized() const {
  return true;
}

void Void::Swap(Void* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Void::InternalSwap(Void* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Void::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Version::kVersionFieldNumber;
const int Version::kReleaseFieldNumber;
const int Version::kOsFieldNumber;
const int Version::kOsVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Version::Version()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Version.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Version)
}
Version::Version(const Version& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_release()) {
    release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
  }
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_os_version()) {
    os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Version)
}

void Version::SharedCtor() {
  release_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0u;
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Version)
  SharedDtor();
}

void Version::SharedDtor() {
  release_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Version& Version::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Version.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      release_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      os_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_version_.ClearNonDefaultToEmptyNoArena();
    }
  }
  version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Version)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string release = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->release().data(), static_cast<int>(this->release().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Version.release");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), static_cast<int>(this->os().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Version.os");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os_version().data(), static_cast<int>(this->os_version().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Version.os_version");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional string release = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release().data(), static_cast<int>(this->release().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Version.release");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->release(), output);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Version.os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os(), output);
  }

  // optional string os_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Version.os_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Version)
}

::google::protobuf::uint8* Version::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Version)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional string release = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->release().data(), static_cast<int>(this->release().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Version.release");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->release(), target);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), static_cast<int>(this->os().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Version.os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->os(), target);
  }

  // optional string os_version = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os_version().data(), static_cast<int>(this->os_version().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Version.os_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Version)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string release = 2;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release());
    }

    // optional string os = 3;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Version>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Version)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_release();
      release_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.release_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_os();
      os_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_os_version();
      os_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_version_);
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::Swap(Version* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Version::InternalSwap(Version* other) {
  using std::swap;
  release_.Swap(&other->release_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_.Swap(&other->os_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_version_.Swap(&other->os_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Uptime::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uptime::kSecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uptime::Uptime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Uptime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Uptime)
}
Uptime::Uptime(const Uptime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secs_ = from.secs_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Uptime)
}

void Uptime::SharedCtor() {
  secs_ = GOOGLE_ULONGLONG(0);
}

Uptime::~Uptime() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Uptime)
  SharedDtor();
}

void Uptime::SharedDtor() {
}

void Uptime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Uptime::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Uptime& Uptime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Uptime.base);
  return *internal_default_instance();
}


void Uptime::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Uptime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secs_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Uptime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Uptime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 secs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Uptime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Uptime)
  return false;
#undef DO_
}

void Uptime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Uptime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 secs = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->secs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Uptime)
}

::google::protobuf::uint8* Uptime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Uptime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 secs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->secs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Uptime)
  return target;
}

size_t Uptime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Uptime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional uint64 secs = 1;
  if (has_secs()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->secs());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uptime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Uptime)
  GOOGLE_DCHECK_NE(&from, this);
  const Uptime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Uptime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Uptime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Uptime)
    MergeFrom(*source);
  }
}

void Uptime::MergeFrom(const Uptime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Uptime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_secs()) {
    set_secs(from.secs());
  }
}

void Uptime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Uptime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uptime::CopyFrom(const Uptime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Uptime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uptime::IsInitialized() const {
  return true;
}

void Uptime::Swap(Uptime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uptime::InternalSwap(Uptime* other) {
  using std::swap;
  swap(secs_, other->secs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Uptime::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server_Event::InitAsDefaultInstance() {
  ::MurmurRPC::_Server_Event_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_Server_Event_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
  ::MurmurRPC::_Server_Event_default_instance_._instance.get_mutable()->message_ = const_cast< ::MurmurRPC::TextMessage*>(
      ::MurmurRPC::TextMessage::internal_default_instance());
  ::MurmurRPC::_Server_Event_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server_Event::kServerFieldNumber;
const int Server_Event::kTypeFieldNumber;
const int Server_Event::kUserFieldNumber;
const int Server_Event::kMessageFieldNumber;
const int Server_Event::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server_Event::Server_Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Server_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Server.Event)
}
Server_Event::Server_Event(const Server_Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::MurmurRPC::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::MurmurRPC::TextMessage(*from.message_);
  } else {
    message_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Server.Event)
}

void Server_Event::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&server_)) + sizeof(type_));
}

Server_Event::~Server_Event() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Server.Event)
  SharedDtor();
}

void Server_Event::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete message_;
  if (this != internal_default_instance()) delete channel_;
}

void Server_Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Server_Event::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server_Event& Server_Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Server_Event.base);
  return *internal_default_instance();
}


void Server_Event::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Server.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(message_ != NULL);
      message_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Server_Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Server.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Server.Event.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::Server_Event_Type_IsValid(value)) {
            set_type(static_cast< ::MurmurRPC::Server_Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.TextMessage message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Server.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Server.Event)
  return false;
#undef DO_
}

void Server_Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Server.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.Server.Event.Type type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .MurmurRPC.User user = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user(), output);
  }

  // optional .MurmurRPC.TextMessage message = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_message(), output);
  }

  // optional .MurmurRPC.Channel channel = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Server.Event)
}

::google::protobuf::uint8* Server_Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Server.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.Server.Event.Type type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .MurmurRPC.User user = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user(), deterministic, target);
  }

  // optional .MurmurRPC.TextMessage message = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_message(), deterministic, target);
  }

  // optional .MurmurRPC.Channel channel = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_channel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Server.Event)
  return target;
}

size_t Server_Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Server.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.User user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.TextMessage message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional .MurmurRPC.Channel channel = 5;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

    // optional .MurmurRPC.Server.Event.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server_Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Server.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Server_Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server_Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Server.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Server.Event)
    MergeFrom(*source);
  }
}

void Server_Event::MergeFrom(const Server_Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Server.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user()->::MurmurRPC::User::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_message()->::MurmurRPC::TextMessage::MergeFrom(from.message());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Server_Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Server.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_Event::CopyFrom(const Server_Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Server.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_Event::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void Server_Event::Swap(Server_Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server_Event::InternalSwap(Server_Event* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(user_, other->user_);
  swap(message_, other->message_);
  swap(channel_, other->channel_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Server_Event::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server_Query::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server_Query::Server_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Server_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Server.Query)
}
Server_Query::Server_Query(const Server_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Server.Query)
}

void Server_Query::SharedCtor() {
}

Server_Query::~Server_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Server.Query)
  SharedDtor();
}

void Server_Query::SharedDtor() {
}

void Server_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Server_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server_Query& Server_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Server_Query.base);
  return *internal_default_instance();
}


void Server_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Server.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Server_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Server.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Server.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Server.Query)
  return false;
#undef DO_
}

void Server_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Server.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Server.Query)
}

::google::protobuf::uint8* Server_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Server.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Server.Query)
  return target;
}

size_t Server_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Server.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Server.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Server_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Server.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Server.Query)
    MergeFrom(*source);
  }
}

void Server_Query::MergeFrom(const Server_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Server.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Server_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Server.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_Query::CopyFrom(const Server_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Server.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_Query::IsInitialized() const {
  return true;
}

void Server_Query::Swap(Server_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server_Query::InternalSwap(Server_Query* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Server_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server_List::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server_List::kServersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server_List::Server_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Server_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Server.List)
}
Server_List::Server_List(const Server_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Server.List)
}

void Server_List::SharedCtor() {
}

Server_List::~Server_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Server.List)
  SharedDtor();
}

void Server_List::SharedDtor() {
}

void Server_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Server_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server_List& Server_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Server_List.base);
  return *internal_default_instance();
}


void Server_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Server.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Server_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Server.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MurmurRPC.Server servers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_servers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Server.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Server.List)
  return false;
#undef DO_
}

void Server_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Server.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MurmurRPC.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->servers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Server.List)
}

::google::protobuf::uint8* Server_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Server.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MurmurRPC.Server servers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->servers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->servers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Server.List)
  return target;
}

size_t Server_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Server.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.Server servers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->servers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->servers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Server.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Server_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Server.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Server.List)
    MergeFrom(*source);
  }
}

void Server_List::MergeFrom(const Server_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Server.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
}

void Server_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Server.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server_List::CopyFrom(const Server_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Server.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->servers())) return false;
  return true;
}

void Server_List::Swap(Server_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server_List::InternalSwap(Server_List* other) {
  using std::swap;
  CastToBase(&servers_)->InternalSwap(CastToBase(&other->servers_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Server_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Server::InitAsDefaultInstance() {
  ::MurmurRPC::_Server_default_instance_._instance.get_mutable()->uptime_ = const_cast< ::MurmurRPC::Uptime*>(
      ::MurmurRPC::Uptime::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server::kIdFieldNumber;
const int Server::kRunningFieldNumber;
const int Server::kUptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server::Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Server.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Server)
}
Server::Server(const Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_uptime()) {
    uptime_ = new ::MurmurRPC::Uptime(*from.uptime_);
  } else {
    uptime_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&running_) -
    reinterpret_cast<char*>(&id_)) + sizeof(running_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Server)
}

void Server::SharedCtor() {
  ::memset(&uptime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&running_) -
      reinterpret_cast<char*>(&uptime_)) + sizeof(running_));
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  if (this != internal_default_instance()) delete uptime_;
}

void Server::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Server& Server::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Server.base);
  return *internal_default_instance();
}


void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(uptime_ != NULL);
    uptime_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&running_) -
        reinterpret_cast<char*>(&id_)) + sizeof(running_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Server)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool running = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_running();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Uptime uptime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_uptime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Server)
  return false;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bool running = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->running(), output);
  }

  // optional .MurmurRPC.Uptime uptime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_uptime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Server)
}

::google::protobuf::uint8* Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bool running = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->running(), target);
  }

  // optional .MurmurRPC.Uptime uptime = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_uptime(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional .MurmurRPC.Uptime uptime = 3;
  if (has_uptime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *uptime_);
  }

  // optional bool running = 2;
  if (has_running()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Server)
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_uptime()->::MurmurRPC::Uptime::MergeFrom(from.uptime());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      running_ = from.running_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Server::Swap(Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server::InternalSwap(Server* other) {
  using std::swap;
  swap(uptime_, other->uptime_);
  swap(id_, other->id_);
  swap(running_, other->running_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::MurmurRPC::_Event_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kServerFieldNumber;
const int Event::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Event.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Event)
}
Event::Event(const Event& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Event)
}

void Event::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&server_)) + sizeof(type_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Event& Event::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Event.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Event)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Event.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::Event_Type_IsValid(value)) {
            set_type(static_cast< ::MurmurRPC::Event_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.Event.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Event)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.Event.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.Event.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ContextAction::InitAsDefaultInstance() {
  ::MurmurRPC::_ContextAction_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_ContextAction_default_instance_._instance.get_mutable()->actor_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
  ::MurmurRPC::_ContextAction_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
  ::MurmurRPC::_ContextAction_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ContextAction::kServerFieldNumber;
const int ContextAction::kContextFieldNumber;
const int ContextAction::kActionFieldNumber;
const int ContextAction::kTextFieldNumber;
const int ContextAction::kActorFieldNumber;
const int ContextAction::kUserFieldNumber;
const int ContextAction::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ContextAction::ContextAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_ContextAction.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.ContextAction)
}
ContextAction::ContextAction(const ContextAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_actor()) {
    actor_ = new ::MurmurRPC::User(*from.actor_);
  } else {
    actor_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::MurmurRPC::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  context_ = from.context_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.ContextAction)
}

void ContextAction::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_) -
      reinterpret_cast<char*>(&server_)) + sizeof(context_));
}

ContextAction::~ContextAction() {
  // @@protoc_insertion_point(destructor:MurmurRPC.ContextAction)
  SharedDtor();
}

void ContextAction::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete actor_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete channel_;
}

void ContextAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ContextAction::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ContextAction& ContextAction::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_ContextAction.base);
  return *internal_default_instance();
}


void ContextAction::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.ContextAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      action_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(actor_ != NULL);
      actor_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
  }
  context_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ContextAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.ContextAction)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 context = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_context();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.ContextAction.action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.ContextAction.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User actor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User user = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.ContextAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.ContextAction)
  return false;
#undef DO_
}

void ContextAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.ContextAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional uint32 context = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->context(), output);
  }

  // optional string action = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ContextAction.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->action(), output);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ContextAction.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional .MurmurRPC.User actor = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_actor(), output);
  }

  // optional .MurmurRPC.User user = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_user(), output);
  }

  // optional .MurmurRPC.Channel channel = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.ContextAction)
}

::google::protobuf::uint8* ContextAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.ContextAction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional uint32 context = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->context(), target);
  }

  // optional string action = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ContextAction.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->action(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ContextAction.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional .MurmurRPC.User actor = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_actor(), deterministic, target);
  }

  // optional .MurmurRPC.User user = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_user(), deterministic, target);
  }

  // optional .MurmurRPC.Channel channel = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_channel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.ContextAction)
  return target;
}

size_t ContextAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.ContextAction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional string action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.User actor = 5;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *actor_);
    }

    // optional .MurmurRPC.User user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.Channel channel = 7;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

    // optional uint32 context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContextAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.ContextAction)
  GOOGLE_DCHECK_NE(&from, this);
  const ContextAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ContextAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.ContextAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.ContextAction)
    MergeFrom(*source);
  }
}

void ContextAction::MergeFrom(const ContextAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.ContextAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_actor()->::MurmurRPC::User::MergeFrom(from.actor());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_user()->::MurmurRPC::User::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
    if (cached_has_bits & 0x00000040u) {
      context_ = from.context_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContextAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.ContextAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextAction::CopyFrom(const ContextAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.ContextAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextAction::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_actor()) {
    if (!this->actor_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void ContextAction::Swap(ContextAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ContextAction::InternalSwap(ContextAction* other) {
  using std::swap;
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(actor_, other->actor_);
  swap(user_, other->user_);
  swap(channel_, other->channel_);
  swap(context_, other->context_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ContextAction::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TextMessage_Filter::InitAsDefaultInstance() {
  ::MurmurRPC::_TextMessage_Filter_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_TextMessage_Filter_default_instance_._instance.get_mutable()->message_ = const_cast< ::MurmurRPC::TextMessage*>(
      ::MurmurRPC::TextMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage_Filter::kServerFieldNumber;
const int TextMessage_Filter::kActionFieldNumber;
const int TextMessage_Filter::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage_Filter::TextMessage_Filter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_TextMessage_Filter.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.TextMessage.Filter)
}
TextMessage_Filter::TextMessage_Filter(const TextMessage_Filter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::MurmurRPC::TextMessage(*from.message_);
  } else {
    message_ = NULL;
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.TextMessage.Filter)
}

void TextMessage_Filter::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&server_)) + sizeof(action_));
}

TextMessage_Filter::~TextMessage_Filter() {
  // @@protoc_insertion_point(destructor:MurmurRPC.TextMessage.Filter)
  SharedDtor();
}

void TextMessage_Filter::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete message_;
}

void TextMessage_Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TextMessage_Filter::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMessage_Filter& TextMessage_Filter::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_TextMessage_Filter.base);
  return *internal_default_instance();
}


void TextMessage_Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.TextMessage.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(message_ != NULL);
      message_->Clear();
    }
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextMessage_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.TextMessage.Filter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.TextMessage.Filter.Action action = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::TextMessage_Filter_Action_IsValid(value)) {
            set_action(static_cast< ::MurmurRPC::TextMessage_Filter_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.TextMessage message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.TextMessage.Filter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.TextMessage.Filter)
  return false;
#undef DO_
}

void TextMessage_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.TextMessage.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.TextMessage.Filter.Action action = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->action(), output);
  }

  // optional .MurmurRPC.TextMessage message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.TextMessage.Filter)
}

::google::protobuf::uint8* TextMessage_Filter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.TextMessage.Filter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.TextMessage.Filter.Action action = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->action(), target);
  }

  // optional .MurmurRPC.TextMessage message = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_message(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.TextMessage.Filter)
  return target;
}

size_t TextMessage_Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.TextMessage.Filter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.TextMessage message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_);
    }

    // optional .MurmurRPC.TextMessage.Filter.Action action = 2;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextMessage_Filter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.TextMessage.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMessage_Filter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage_Filter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.TextMessage.Filter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.TextMessage.Filter)
    MergeFrom(*source);
  }
}

void TextMessage_Filter::MergeFrom(const TextMessage_Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.TextMessage.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_message()->::MurmurRPC::TextMessage::MergeFrom(from.message());
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TextMessage_Filter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.TextMessage.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage_Filter::CopyFrom(const TextMessage_Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.TextMessage.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage_Filter::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_message()) {
    if (!this->message_->IsInitialized()) return false;
  }
  return true;
}

void TextMessage_Filter::Swap(TextMessage_Filter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage_Filter::InternalSwap(TextMessage_Filter* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(message_, other->message_);
  swap(action_, other->action_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TextMessage_Filter::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TextMessage::InitAsDefaultInstance() {
  ::MurmurRPC::_TextMessage_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_TextMessage_default_instance_._instance.get_mutable()->actor_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextMessage::kServerFieldNumber;
const int TextMessage::kActorFieldNumber;
const int TextMessage::kUsersFieldNumber;
const int TextMessage::kChannelsFieldNumber;
const int TextMessage::kTreesFieldNumber;
const int TextMessage::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextMessage::TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_TextMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.TextMessage)
}
TextMessage::TextMessage(const TextMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_),
      channels_(from.channels_),
      trees_(from.trees_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_actor()) {
    actor_ = new ::MurmurRPC::User(*from.actor_);
  } else {
    actor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.TextMessage)
}

void TextMessage::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_) -
      reinterpret_cast<char*>(&server_)) + sizeof(actor_));
}

TextMessage::~TextMessage() {
  // @@protoc_insertion_point(destructor:MurmurRPC.TextMessage)
  SharedDtor();
}

void TextMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete actor_;
}

void TextMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TextMessage::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TextMessage& TextMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_TextMessage.base);
  return *internal_default_instance();
}


void TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  channels_.Clear();
  trees_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(actor_ != NULL);
      actor_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.TextMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User actor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.User users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Channel channels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Channel trees = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trees()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.TextMessage.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.TextMessage)
  return false;
#undef DO_
}

void TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.User actor = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_actor(), output);
  }

  // repeated .MurmurRPC.User users = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->users(static_cast<int>(i)),
      output);
  }

  // repeated .MurmurRPC.Channel channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->channels(static_cast<int>(i)),
      output);
  }

  // repeated .MurmurRPC.Channel trees = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trees_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->trees(static_cast<int>(i)),
      output);
  }

  // optional string text = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.TextMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.TextMessage)
}

::google::protobuf::uint8* TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.User actor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_actor(), deterministic, target);
  }

  // repeated .MurmurRPC.User users = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->users(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MurmurRPC.Channel channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->channels(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MurmurRPC.Channel trees = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trees_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->trees(static_cast<int>(i)), deterministic, target);
  }

  // optional string text = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.TextMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.TextMessage)
  return target;
}

size_t TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.TextMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.User users = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  // repeated .MurmurRPC.Channel channels = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->channels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channels(static_cast<int>(i)));
    }
  }

  // repeated .MurmurRPC.Channel trees = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->trees_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trees(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.User actor = 2;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *actor_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TextMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.TextMessage)
    MergeFrom(*source);
  }
}

void TextMessage::MergeFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  channels_.MergeFrom(from.channels_);
  trees_.MergeFrom(from.trees_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_actor()->::MurmurRPC::User::MergeFrom(from.actor());
    }
  }
}

void TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMessage::CopyFrom(const TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMessage::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->channels())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->trees())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_actor()) {
    if (!this->actor_->IsInitialized()) return false;
  }
  return true;
}

void TextMessage::Swap(TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TextMessage::InternalSwap(TextMessage* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  CastToBase(&channels_)->InternalSwap(CastToBase(&other->channels_));
  CastToBase(&trees_)->InternalSwap(CastToBase(&other->trees_));
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(actor_, other->actor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TextMessage::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Log_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_Log_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log_Query::kServerFieldNumber;
const int Log_Query::kMinFieldNumber;
const int Log_Query::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log_Query::Log_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Log_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Log.Query)
}
Log_Query::Log_Query(const Log_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Log.Query)
}

void Log_Query::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&server_)) + sizeof(max_));
}

Log_Query::~Log_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Log.Query)
  SharedDtor();
}

void Log_Query::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Log_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Log_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Log_Query& Log_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Log_Query.base);
  return *internal_default_instance();
}


void Log_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Log.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&min_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Log_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Log.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Log.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Log.Query)
  return false;
#undef DO_
}

void Log_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Log.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->min(), output);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Log.Query)
}

::google::protobuf::uint8* Log_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Log.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional uint32 min = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->min(), target);
  }

  // optional uint32 max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Log.Query)
  return target;
}

size_t Log_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Log.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional uint32 min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Log.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Log_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Log.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Log.Query)
    MergeFrom(*source);
  }
}

void Log_Query::MergeFrom(const Log_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Log.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Log_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Log.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log_Query::CopyFrom(const Log_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Log.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Log_Query::Swap(Log_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log_Query::InternalSwap(Log_Query* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Log_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Log_List::InitAsDefaultInstance() {
  ::MurmurRPC::_Log_List_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log_List::kServerFieldNumber;
const int Log_List::kTotalFieldNumber;
const int Log_List::kMinFieldNumber;
const int Log_List::kMaxFieldNumber;
const int Log_List::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log_List::Log_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Log_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Log.List)
}
Log_List::Log_List(const Log_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&total_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Log.List)
}

void Log_List::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&server_)) + sizeof(max_));
}

Log_List::~Log_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Log.List)
  SharedDtor();
}

void Log_List::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Log_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Log_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Log_List& Log_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Log_List.base);
  return *internal_default_instance();
}


void Log_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Log.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&total_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Log_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Log.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Log entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Log.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Log.List)
  return false;
#undef DO_
}

void Log_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Log.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total(), output);
  }

  // optional uint32 min = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min(), output);
  }

  // optional uint32 max = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max(), output);
  }

  // repeated .MurmurRPC.Log entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Log.List)
}

::google::protobuf::uint8* Log_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Log.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional uint32 total = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total(), target);
  }

  // optional uint32 min = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min(), target);
  }

  // optional uint32 max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max(), target);
  }

  // repeated .MurmurRPC.Log entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Log.List)
  return target;
}

size_t Log_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Log.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.Log entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional uint32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total());
    }

    // optional uint32 min = 3;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min());
    }

    // optional uint32 max = 4;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Log.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Log_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Log.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Log.List)
    MergeFrom(*source);
  }
}

void Log_List::MergeFrom(const Log_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Log.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      total_ = from.total_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_ = from.min_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Log_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Log.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log_List::CopyFrom(const Log_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Log.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Log_List::Swap(Log_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log_List::InternalSwap(Log_List* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  swap(server_, other->server_);
  swap(total_, other->total_);
  swap(min_, other->min_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Log_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Log::InitAsDefaultInstance() {
  ::MurmurRPC::_Log_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kServerFieldNumber;
const int Log::kTimestampFieldNumber;
const int Log::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log::Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Log.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Log)
}
Log::Log(const Log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Log)
}

void Log::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&server_)) + sizeof(timestamp_));
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Log)
  SharedDtor();
}

void Log::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Log& Log::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Log.base);
  return *internal_default_instance();
}


void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Log)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Log.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Log.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Log)
}

::google::protobuf::uint8* Log::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Log)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional int64 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Log.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Log)
  return target;
}

size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Log)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional int64 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Log::Swap(Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log::InternalSwap(Log* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Config_FieldsEntry_DoNotUse::Config_FieldsEntry_DoNotUse() {}
Config_FieldsEntry_DoNotUse::Config_FieldsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Config_FieldsEntry_DoNotUse::MergeFrom(const Config_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Config_FieldsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[14];
}
void Config_FieldsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Config_Field::InitAsDefaultInstance() {
  ::MurmurRPC::_Config_Field_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config_Field::kServerFieldNumber;
const int Config_Field::kKeyFieldNumber;
const int Config_Field::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config_Field::Config_Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Config_Field.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Config.Field)
}
Config_Field::Config_Field(const Config_Field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Config.Field)
}

void Config_Field::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ = NULL;
}

Config_Field::~Config_Field() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Config.Field)
  SharedDtor();
}

void Config_Field::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void Config_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config_Field::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config_Field& Config_Field::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Config_Field.base);
  return *internal_default_instance();
}


void Config_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Config.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config_Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Config.Field)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Config.Field.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Config.Field.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Config.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Config.Field)
  return false;
#undef DO_
}

void Config_Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Config.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Config.Field.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Config.Field.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Config.Field)
}

::google::protobuf::uint8* Config_Field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Config.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional string key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Config.Field.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // optional string value = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Config.Field.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Config.Field)
  return target;
}

size_t Config_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Config.Field)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config_Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Config.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Config_Field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config_Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Config.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Config.Field)
    MergeFrom(*source);
  }
}

void Config_Field::MergeFrom(const Config_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Config.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
  }
}

void Config_Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Config.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config_Field::CopyFrom(const Config_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Config.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config_Field::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Config_Field::Swap(Config_Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config_Field::InternalSwap(Config_Field* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config_Field::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Config::InitAsDefaultInstance() {
  ::MurmurRPC::_Config_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kServerFieldNumber;
const int Config::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Config.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Config)
}

void Config::SharedCtor() {
  server_ = NULL;
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Config.base);
  return *internal_default_instance();
}


void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Config)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Config_FieldsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Config_FieldsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&fields_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Config.FieldsEntry.key");
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Config.FieldsEntry.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // map<string, string> fields = 2;
  if (!this->fields().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MurmurRPC.Config.FieldsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MurmurRPC.Config.FieldsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->fields().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fields().begin();
          it != this->fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Config_FieldsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fields_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Config_FieldsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fields().begin();
          it != this->fields().end(); ++it) {
        entry.reset(fields_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // map<string, string> fields = 2;
  if (!this->fields().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MurmurRPC.Config.FieldsEntry.key");
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "MurmurRPC.Config.FieldsEntry.value");
      }
    };

    if (deterministic &&
        this->fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->fields().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fields().begin();
          it != this->fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<Config_FieldsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fields_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<Config_FieldsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->fields().begin();
          it != this->fields().end(); ++it) {
        entry.reset(fields_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, string> fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  {
    ::std::unique_ptr<Config_FieldsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->fields().begin();
        it != this->fields().end(); ++it) {
      entry.reset(fields_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  fields_.Swap(&other->fields_);
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Channel_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_Channel_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel_Query::kServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel_Query::Channel_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Channel_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Channel.Query)
}
Channel_Query::Channel_Query(const Channel_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Channel.Query)
}

void Channel_Query::SharedCtor() {
  server_ = NULL;
}

Channel_Query::~Channel_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Channel.Query)
  SharedDtor();
}

void Channel_Query::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Channel_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Channel_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Channel_Query& Channel_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Channel_Query.base);
  return *internal_default_instance();
}


void Channel_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Channel.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Channel_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Channel.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Channel.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Channel.Query)
  return false;
#undef DO_
}

void Channel_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Channel.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Channel.Query)
}

::google::protobuf::uint8* Channel_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Channel.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Channel.Query)
  return target;
}

size_t Channel_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Channel.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Channel.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Channel.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Channel.Query)
    MergeFrom(*source);
  }
}

void Channel_Query::MergeFrom(const Channel_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Channel.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Channel_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Channel.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel_Query::CopyFrom(const Channel_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Channel.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Channel_Query::Swap(Channel_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel_Query::InternalSwap(Channel_Query* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Channel_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Channel_List::InitAsDefaultInstance() {
  ::MurmurRPC::_Channel_List_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel_List::kServerFieldNumber;
const int Channel_List::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel_List::Channel_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Channel_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Channel.List)
}
Channel_List::Channel_List(const Channel_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Channel.List)
}

void Channel_List::SharedCtor() {
  server_ = NULL;
}

Channel_List::~Channel_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Channel.List)
  SharedDtor();
}

void Channel_List::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Channel_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Channel_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Channel_List& Channel_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Channel_List.base);
  return *internal_default_instance();
}


void Channel_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Channel.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Channel_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Channel.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Channel channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Channel.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Channel.List)
  return false;
#undef DO_
}

void Channel_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Channel.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // repeated .MurmurRPC.Channel channels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->channels(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Channel.List)
}

::google::protobuf::uint8* Channel_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Channel.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // repeated .MurmurRPC.Channel channels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->channels(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Channel.List)
  return target;
}

size_t Channel_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Channel.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.Channel channels = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->channels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channels(static_cast<int>(i)));
    }
  }

  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Channel.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Channel.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Channel.List)
    MergeFrom(*source);
  }
}

void Channel_List::MergeFrom(const Channel_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Channel.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Channel_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Channel.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel_List::CopyFrom(const Channel_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Channel.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->channels())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Channel_List::Swap(Channel_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel_List::InternalSwap(Channel_List* other) {
  using std::swap;
  CastToBase(&channels_)->InternalSwap(CastToBase(&other->channels_));
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Channel_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Channel::InitAsDefaultInstance() {
  ::MurmurRPC::_Channel_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_Channel_default_instance_._instance.get_mutable()->parent_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Channel::kServerFieldNumber;
const int Channel::kIdFieldNumber;
const int Channel::kNameFieldNumber;
const int Channel::kParentFieldNumber;
const int Channel::kLinksFieldNumber;
const int Channel::kDescriptionFieldNumber;
const int Channel::kTemporaryFieldNumber;
const int Channel::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Channel::Channel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Channel.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Channel)
}
Channel::Channel(const Channel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      links_(from.links_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_parent()) {
    parent_ = new ::MurmurRPC::Channel(*from.parent_);
  } else {
    parent_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Channel)
}

void Channel::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&server_)) + sizeof(position_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete parent_;
}

void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Channel::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Channel& Channel::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Channel.base);
  return *internal_default_instance();
}


void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  links_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(parent_ != NULL);
      parent_->Clear();
    }
  }
  if (cached_has_bits & 112u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&id_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Channel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Channel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Channel.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Channel links = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_links()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Channel.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool temporary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_temporary();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &temporary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 position = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_position();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Channel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Channel)
  return false;
#undef DO_
}

void Channel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Channel.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .MurmurRPC.Channel parent = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_parent(), output);
  }

  // repeated .MurmurRPC.Channel links = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->links(static_cast<int>(i)),
      output);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Channel.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional bool temporary = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->temporary(), output);
  }

  // optional int32 position = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Channel)
}

::google::protobuf::uint8* Channel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Channel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Channel.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .MurmurRPC.Channel parent = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_parent(), deterministic, target);
  }

  // repeated .MurmurRPC.Channel links = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->links_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->links(static_cast<int>(i)), deterministic, target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Channel.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional bool temporary = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->temporary(), target);
  }

  // optional int32 position = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Channel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.Channel links = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->links_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->links(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 6;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.Channel parent = 4;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool temporary = 7;
    if (has_temporary()) {
      total_size += 1 + 1;
    }

    // optional int32 position = 8;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Channel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Channel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  links_.MergeFrom(from.links_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_parent()->::MurmurRPC::Channel::MergeFrom(from.parent());
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      temporary_ = from.temporary_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Channel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->links())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_parent()) {
    if (!this->parent_->IsInitialized()) return false;
  }
  return true;
}

void Channel::Swap(Channel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Channel::InternalSwap(Channel* other) {
  using std::swap;
  CastToBase(&links_)->InternalSwap(CastToBase(&other->links_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(parent_, other->parent_);
  swap(id_, other->id_);
  swap(temporary_, other->temporary_);
  swap(position_, other->position_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Channel::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_User_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_Query::kServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_Query::User_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_User_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.User.Query)
}
User_Query::User_Query(const User_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.User.Query)
}

void User_Query::SharedCtor() {
  server_ = NULL;
}

User_Query::~User_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.User.Query)
  SharedDtor();
}

void User_Query::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void User_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_Query& User_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_User_Query.base);
  return *internal_default_instance();
}


void User_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.User.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.User.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.User.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.User.Query)
  return false;
#undef DO_
}

void User_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.User.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.User.Query)
}

::google::protobuf::uint8* User_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.User.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.User.Query)
  return target;
}

size_t User_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.User.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.User.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const User_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.User.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.User.Query)
    MergeFrom(*source);
  }
}

void User_Query::MergeFrom(const User_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.User.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void User_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.User.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_Query::CopyFrom(const User_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.User.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void User_Query::Swap(User_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_Query::InternalSwap(User_Query* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User_List::InitAsDefaultInstance() {
  ::MurmurRPC::_User_List_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_List::kServerFieldNumber;
const int User_List::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_List::User_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_User_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.User.List)
}
User_List::User_List(const User_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.User.List)
}

void User_List::SharedCtor() {
  server_ = NULL;
}

User_List::~User_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.User.List)
  SharedDtor();
}

void User_List::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void User_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_List& User_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_User_List.base);
  return *internal_default_instance();
}


void User_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.User.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.User.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.User users = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.User.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.User.List)
  return false;
#undef DO_
}

void User_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.User.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // repeated .MurmurRPC.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.User.List)
}

::google::protobuf::uint8* User_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.User.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // repeated .MurmurRPC.User users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.User.List)
  return target;
}

size_t User_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.User.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.User users = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.User.List)
  GOOGLE_DCHECK_NE(&from, this);
  const User_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.User.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.User.List)
    MergeFrom(*source);
  }
}

void User_List::MergeFrom(const User_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.User.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void User_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.User.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_List::CopyFrom(const User_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.User.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void User_List::Swap(User_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_List::InternalSwap(User_List* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User_Kick::InitAsDefaultInstance() {
  ::MurmurRPC::_User_Kick_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_User_Kick_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
  ::MurmurRPC::_User_Kick_default_instance_._instance.get_mutable()->actor_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User_Kick::kServerFieldNumber;
const int User_Kick::kUserFieldNumber;
const int User_Kick::kActorFieldNumber;
const int User_Kick::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User_Kick::User_Kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_User_Kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.User.Kick)
}
User_Kick::User_Kick(const User_Kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::MurmurRPC::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_actor()) {
    actor_ = new ::MurmurRPC::User(*from.actor_);
  } else {
    actor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.User.Kick)
}

void User_Kick::SharedCtor() {
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actor_) -
      reinterpret_cast<char*>(&server_)) + sizeof(actor_));
}

User_Kick::~User_Kick() {
  // @@protoc_insertion_point(destructor:MurmurRPC.User.Kick)
  SharedDtor();
}

void User_Kick::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete actor_;
}

void User_Kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User_Kick::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User_Kick& User_Kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_User_Kick.base);
  return *internal_default_instance();
}


void User_Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.User.Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(actor_ != NULL);
      actor_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User_Kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.User.Kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User actor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_actor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.User.Kick.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.User.Kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.User.Kick)
  return false;
#undef DO_
}

void User_Kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.User.Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.User user = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user(), output);
  }

  // optional .MurmurRPC.User actor = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_actor(), output);
  }

  // optional string reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.Kick.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.User.Kick)
}

::google::protobuf::uint8* User_Kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.User.Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.User user = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user(), deterministic, target);
  }

  // optional .MurmurRPC.User actor = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_actor(), deterministic, target);
  }

  // optional string reason = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.Kick.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.User.Kick)
  return target;
}

size_t User_Kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.User.Kick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.User user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.User actor = 3;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *actor_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User_Kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.User.Kick)
  GOOGLE_DCHECK_NE(&from, this);
  const User_Kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User_Kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.User.Kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.User.Kick)
    MergeFrom(*source);
  }
}

void User_Kick::MergeFrom(const User_Kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.User.Kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_user()->::MurmurRPC::User::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_actor()->::MurmurRPC::User::MergeFrom(from.actor());
    }
  }
}

void User_Kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.User.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User_Kick::CopyFrom(const User_Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.User.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User_Kick::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_actor()) {
    if (!this->actor_->IsInitialized()) return false;
  }
  return true;
}

void User_Kick::Swap(User_Kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User_Kick::InternalSwap(User_Kick* other) {
  using std::swap;
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(user_, other->user_);
  swap(actor_, other->actor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User_Kick::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::MurmurRPC::_User_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_User_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
  ::MurmurRPC::_User_default_instance_._instance.get_mutable()->version_ = const_cast< ::MurmurRPC::Version*>(
      ::MurmurRPC::Version::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kServerFieldNumber;
const int User::kSessionFieldNumber;
const int User::kIdFieldNumber;
const int User::kNameFieldNumber;
const int User::kMuteFieldNumber;
const int User::kDeafFieldNumber;
const int User::kSuppressFieldNumber;
const int User::kPrioritySpeakerFieldNumber;
const int User::kSelfMuteFieldNumber;
const int User::kSelfDeafFieldNumber;
const int User::kRecordingFieldNumber;
const int User::kChannelFieldNumber;
const int User::kOnlineSecsFieldNumber;
const int User::kIdleSecsFieldNumber;
const int User::kBytesPerSecFieldNumber;
const int User::kVersionFieldNumber;
const int User::kPluginContextFieldNumber;
const int User::kPluginIdentityFieldNumber;
const int User::kCommentFieldNumber;
const int User::kTextureFieldNumber;
const int User::kAddressFieldNumber;
const int User::kTcpOnlyFieldNumber;
const int User::kUdpPingMsecsFieldNumber;
const int User::kTcpPingMsecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_User.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  plugin_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugin_context()) {
    plugin_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_context_);
  }
  plugin_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plugin_identity()) {
    plugin_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_identity_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texture()) {
    texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
  }
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  if (from.has_version()) {
    version_ = new ::MurmurRPC::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  ::memcpy(&session_, &from.session_,
    static_cast<size_t>(reinterpret_cast<char*>(&tcp_ping_msecs_) -
    reinterpret_cast<char*>(&session_)) + sizeof(tcp_ping_msecs_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.User)
}

void User::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_context_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_identity_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tcp_ping_msecs_) -
      reinterpret_cast<char*>(&server_)) + sizeof(tcp_ping_msecs_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:MurmurRPC.User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_context_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plugin_identity_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete version_;
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_User.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      plugin_context_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      plugin_identity_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      texture_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(version_ != NULL);
    version_->Clear();
  }
  if (cached_has_bits & 65024u) {
    ::memset(&session_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&online_secs_) -
        reinterpret_cast<char*>(&session_)) + sizeof(online_secs_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&self_mute_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcp_ping_msecs_) -
        reinterpret_cast<char*>(&self_mute_)) + sizeof(tcp_ping_msecs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 session = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.User.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mute = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_mute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deaf = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_deaf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deaf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool suppress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_suppress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suppress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool priority_speaker = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_priority_speaker();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &priority_speaker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool self_mute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_self_mute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_mute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool self_deaf = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_self_deaf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &self_deaf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool recording = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_recording();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 online_secs = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_online_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idle_secs = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_idle_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bytes_per_sec = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_bytes_per_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Version version = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes plugin_context = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plugin_context()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string plugin_identity = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plugin_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->plugin_identity().data(), static_cast<int>(this->plugin_identity().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.User.plugin_identity");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.User.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes texture = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes address = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tcp_only = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_tcp_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tcp_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float udp_ping_msecs = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u /* 189 & 0xFF */)) {
          set_has_udp_ping_msecs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &udp_ping_msecs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tcp_ping_msecs = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          set_has_tcp_ping_msecs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcp_ping_msecs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional uint32 session = 2;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session(), output);
  }

  // optional uint32 id = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional bool mute = 5;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->mute(), output);
  }

  // optional bool deaf = 6;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->deaf(), output);
  }

  // optional bool suppress = 7;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->suppress(), output);
  }

  // optional bool priority_speaker = 8;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->priority_speaker(), output);
  }

  // optional bool self_mute = 9;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->self_mute(), output);
  }

  // optional bool self_deaf = 10;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->self_deaf(), output);
  }

  // optional bool recording = 11;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->recording(), output);
  }

  // optional .MurmurRPC.Channel channel = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_channel(), output);
  }

  // optional uint32 online_secs = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->online_secs(), output);
  }

  // optional uint32 idle_secs = 14;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->idle_secs(), output);
  }

  // optional uint32 bytes_per_sec = 15;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bytes_per_sec(), output);
  }

  // optional .MurmurRPC.Version version = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_version(), output);
  }

  // optional bytes plugin_context = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->plugin_context(), output);
  }

  // optional string plugin_identity = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_identity().data(), static_cast<int>(this->plugin_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.plugin_identity");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->plugin_identity(), output);
  }

  // optional string comment = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->comment(), output);
  }

  // optional bytes texture = 20;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->texture(), output);
  }

  // optional bytes address = 21;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      21, this->address(), output);
  }

  // optional bool tcp_only = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->tcp_only(), output);
  }

  // optional float udp_ping_msecs = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->udp_ping_msecs(), output);
  }

  // optional float tcp_ping_msecs = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tcp_ping_msecs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional uint32 session = 2;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session(), target);
  }

  // optional uint32 id = 3;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional bool mute = 5;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->mute(), target);
  }

  // optional bool deaf = 6;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->deaf(), target);
  }

  // optional bool suppress = 7;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->suppress(), target);
  }

  // optional bool priority_speaker = 8;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->priority_speaker(), target);
  }

  // optional bool self_mute = 9;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->self_mute(), target);
  }

  // optional bool self_deaf = 10;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->self_deaf(), target);
  }

  // optional bool recording = 11;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->recording(), target);
  }

  // optional .MurmurRPC.Channel channel = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_channel(), deterministic, target);
  }

  // optional uint32 online_secs = 13;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->online_secs(), target);
  }

  // optional uint32 idle_secs = 14;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->idle_secs(), target);
  }

  // optional uint32 bytes_per_sec = 15;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bytes_per_sec(), target);
  }

  // optional .MurmurRPC.Version version = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_version(), deterministic, target);
  }

  // optional bytes plugin_context = 17;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->plugin_context(), target);
  }

  // optional string plugin_identity = 18;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->plugin_identity().data(), static_cast<int>(this->plugin_identity().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.plugin_identity");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->plugin_identity(), target);
  }

  // optional string comment = 19;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.User.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->comment(), target);
  }

  // optional bytes texture = 20;
  if (cached_has_bits & 0x00000010u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->texture(), target);
  }

  // optional bytes address = 21;
  if (cached_has_bits & 0x00000020u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        21, this->address(), target);
  }

  // optional bool tcp_only = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->tcp_only(), target);
  }

  // optional float udp_ping_msecs = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->udp_ping_msecs(), target);
  }

  // optional float tcp_ping_msecs = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->tcp_ping_msecs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes plugin_context = 17;
    if (has_plugin_context()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->plugin_context());
    }

    // optional string plugin_identity = 18;
    if (has_plugin_identity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plugin_identity());
    }

    // optional string comment = 19;
    if (has_comment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional bytes texture = 20;
    if (has_texture()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture());
    }

    // optional bytes address = 21;
    if (has_address()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.Channel channel = 12;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .MurmurRPC.Version version = 16;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional uint32 session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool mute = 5;
    if (has_mute()) {
      total_size += 1 + 1;
    }

    // optional bool deaf = 6;
    if (has_deaf()) {
      total_size += 1 + 1;
    }

    // optional bool suppress = 7;
    if (has_suppress()) {
      total_size += 1 + 1;
    }

    // optional bool priority_speaker = 8;
    if (has_priority_speaker()) {
      total_size += 1 + 1;
    }

    // optional uint32 online_secs = 13;
    if (has_online_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_secs());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool self_mute = 9;
    if (has_self_mute()) {
      total_size += 1 + 1;
    }

    // optional bool self_deaf = 10;
    if (has_self_deaf()) {
      total_size += 1 + 1;
    }

    // optional bool recording = 11;
    if (has_recording()) {
      total_size += 1 + 1;
    }

    // optional bool tcp_only = 22;
    if (has_tcp_only()) {
      total_size += 2 + 1;
    }

    // optional uint32 idle_secs = 14;
    if (has_idle_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idle_secs());
    }

    // optional uint32 bytes_per_sec = 15;
    if (has_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bytes_per_sec());
    }

    // optional float udp_ping_msecs = 23;
    if (has_udp_ping_msecs()) {
      total_size += 2 + 4;
    }

    // optional float tcp_ping_msecs = 24;
    if (has_tcp_ping_msecs()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_plugin_context();
      plugin_context_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_context_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_plugin_identity();
      plugin_identity_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plugin_identity_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_texture();
      texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_version()->::MurmurRPC::Version::MergeFrom(from.version());
    }
    if (cached_has_bits & 0x00000200u) {
      session_ = from.session_;
    }
    if (cached_has_bits & 0x00000400u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000800u) {
      mute_ = from.mute_;
    }
    if (cached_has_bits & 0x00001000u) {
      deaf_ = from.deaf_;
    }
    if (cached_has_bits & 0x00002000u) {
      suppress_ = from.suppress_;
    }
    if (cached_has_bits & 0x00004000u) {
      priority_speaker_ = from.priority_speaker_;
    }
    if (cached_has_bits & 0x00008000u) {
      online_secs_ = from.online_secs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      self_mute_ = from.self_mute_;
    }
    if (cached_has_bits & 0x00020000u) {
      self_deaf_ = from.self_deaf_;
    }
    if (cached_has_bits & 0x00040000u) {
      recording_ = from.recording_;
    }
    if (cached_has_bits & 0x00080000u) {
      tcp_only_ = from.tcp_only_;
    }
    if (cached_has_bits & 0x00100000u) {
      idle_secs_ = from.idle_secs_;
    }
    if (cached_has_bits & 0x00200000u) {
      bytes_per_sec_ = from.bytes_per_sec_;
    }
    if (cached_has_bits & 0x00400000u) {
      udp_ping_msecs_ = from.udp_ping_msecs_;
    }
    if (cached_has_bits & 0x00800000u) {
      tcp_ping_msecs_ = from.tcp_ping_msecs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plugin_context_.Swap(&other->plugin_context_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  plugin_identity_.Swap(&other->plugin_identity_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_.Swap(&other->texture_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(channel_, other->channel_);
  swap(version_, other->version_);
  swap(session_, other->session_);
  swap(id_, other->id_);
  swap(mute_, other->mute_);
  swap(deaf_, other->deaf_);
  swap(suppress_, other->suppress_);
  swap(priority_speaker_, other->priority_speaker_);
  swap(online_secs_, other->online_secs_);
  swap(self_mute_, other->self_mute_);
  swap(self_deaf_, other->self_deaf_);
  swap(recording_, other->recording_);
  swap(tcp_only_, other->tcp_only_);
  swap(idle_secs_, other->idle_secs_);
  swap(bytes_per_sec_, other->bytes_per_sec_);
  swap(udp_ping_msecs_, other->udp_ping_msecs_);
  swap(tcp_ping_msecs_, other->tcp_ping_msecs_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tree_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_Tree_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tree_Query::kServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tree_Query::Tree_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Tree_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Tree.Query)
}
Tree_Query::Tree_Query(const Tree_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Tree.Query)
}

void Tree_Query::SharedCtor() {
  server_ = NULL;
}

Tree_Query::~Tree_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Tree.Query)
  SharedDtor();
}

void Tree_Query::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Tree_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tree_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tree_Query& Tree_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Tree_Query.base);
  return *internal_default_instance();
}


void Tree_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Tree.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tree_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Tree.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Tree.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Tree.Query)
  return false;
#undef DO_
}

void Tree_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Tree.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Tree.Query)
}

::google::protobuf::uint8* Tree_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Tree.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Tree.Query)
  return target;
}

size_t Tree_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Tree.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tree_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Tree.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Tree_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tree_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Tree.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Tree.Query)
    MergeFrom(*source);
  }
}

void Tree_Query::MergeFrom(const Tree_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Tree.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Tree_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Tree.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tree_Query::CopyFrom(const Tree_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Tree.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tree_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Tree_Query::Swap(Tree_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tree_Query::InternalSwap(Tree_Query* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tree_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tree::InitAsDefaultInstance() {
  ::MurmurRPC::_Tree_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_Tree_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tree::kServerFieldNumber;
const int Tree::kChannelFieldNumber;
const int Tree::kChildrenFieldNumber;
const int Tree::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tree::Tree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Tree.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Tree)
}
Tree::Tree(const Tree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      children_(from.children_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Tree)
}

void Tree::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&server_)) + sizeof(channel_));
}

Tree::~Tree() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Tree)
  SharedDtor();
}

void Tree::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete channel_;
}

void Tree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tree::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tree& Tree::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Tree.base);
  return *internal_default_instance();
}


void Tree::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Tree)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Tree children = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.User users = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Tree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Tree)
  return false;
#undef DO_
}

void Tree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.Channel channel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_channel(), output);
  }

  // repeated .MurmurRPC.Tree children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->children(static_cast<int>(i)),
      output);
  }

  // repeated .MurmurRPC.User users = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Tree)
}

::google::protobuf::uint8* Tree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.Channel channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_channel(), deterministic, target);
  }

  // repeated .MurmurRPC.Tree children = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->children(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MurmurRPC.User users = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Tree)
  return target;
}

size_t Tree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Tree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.Tree children = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // repeated .MurmurRPC.User users = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.Channel channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Tree)
  GOOGLE_DCHECK_NE(&from, this);
  const Tree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Tree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Tree)
    MergeFrom(*source);
  }
}

void Tree::MergeFrom(const Tree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Tree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
  }
}

void Tree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tree::CopyFrom(const Tree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tree::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->children())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void Tree::Swap(Tree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tree::InternalSwap(Tree* other) {
  using std::swap;
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(server_, other->server_);
  swap(channel_, other->channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tree::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ban_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_Ban_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ban_Query::kServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ban_Query::Ban_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Ban_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Ban.Query)
}
Ban_Query::Ban_Query(const Ban_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Ban.Query)
}

void Ban_Query::SharedCtor() {
  server_ = NULL;
}

Ban_Query::~Ban_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Ban.Query)
  SharedDtor();
}

void Ban_Query::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Ban_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ban_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ban_Query& Ban_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Ban_Query.base);
  return *internal_default_instance();
}


void Ban_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Ban.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ban_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Ban.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Ban.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Ban.Query)
  return false;
#undef DO_
}

void Ban_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Ban.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Ban.Query)
}

::google::protobuf::uint8* Ban_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Ban.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Ban.Query)
  return target;
}

size_t Ban_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Ban.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ban_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Ban.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Ban_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ban_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Ban.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Ban.Query)
    MergeFrom(*source);
  }
}

void Ban_Query::MergeFrom(const Ban_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Ban.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Ban_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Ban.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ban_Query::CopyFrom(const Ban_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Ban.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ban_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Ban_Query::Swap(Ban_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ban_Query::InternalSwap(Ban_Query* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ban_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ban_List::InitAsDefaultInstance() {
  ::MurmurRPC::_Ban_List_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ban_List::kServerFieldNumber;
const int Ban_List::kBansFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ban_List::Ban_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Ban_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Ban.List)
}
Ban_List::Ban_List(const Ban_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Ban.List)
}

void Ban_List::SharedCtor() {
  server_ = NULL;
}

Ban_List::~Ban_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Ban.List)
  SharedDtor();
}

void Ban_List::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Ban_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ban_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ban_List& Ban_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Ban_List.base);
  return *internal_default_instance();
}


void Ban_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Ban.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ban_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Ban.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.Ban bans = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Ban.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Ban.List)
  return false;
#undef DO_
}

void Ban_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Ban.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // repeated .MurmurRPC.Ban bans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->bans(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Ban.List)
}

::google::protobuf::uint8* Ban_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Ban.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // repeated .MurmurRPC.Ban bans = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bans_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->bans(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Ban.List)
  return target;
}

size_t Ban_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Ban.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.Ban bans = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->bans_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bans(static_cast<int>(i)));
    }
  }

  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ban_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Ban.List)
  GOOGLE_DCHECK_NE(&from, this);
  const Ban_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ban_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Ban.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Ban.List)
    MergeFrom(*source);
  }
}

void Ban_List::MergeFrom(const Ban_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Ban.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bans_.MergeFrom(from.bans_);
  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Ban_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Ban.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ban_List::CopyFrom(const Ban_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Ban.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ban_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->bans())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Ban_List::Swap(Ban_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ban_List::InternalSwap(Ban_List* other) {
  using std::swap;
  CastToBase(&bans_)->InternalSwap(CastToBase(&other->bans_));
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ban_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Ban::InitAsDefaultInstance() {
  ::MurmurRPC::_Ban_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ban::kServerFieldNumber;
const int Ban::kAddressFieldNumber;
const int Ban::kBitsFieldNumber;
const int Ban::kNameFieldNumber;
const int Ban::kHashFieldNumber;
const int Ban::kReasonFieldNumber;
const int Ban::kStartFieldNumber;
const int Ban::kDurationSecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ban::Ban()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Ban.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Ban)
}
Ban::Ban(const Ban& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&bits_) -
    reinterpret_cast<char*>(&start_)) + sizeof(bits_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Ban)
}

void Ban::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bits_) -
      reinterpret_cast<char*>(&server_)) + sizeof(bits_));
}

Ban::~Ban() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Ban)
  SharedDtor();
}

void Ban::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void Ban::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Ban::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ban& Ban::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Ban.base);
  return *internal_default_instance();
}


void Ban::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Ban)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      address_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      reason_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bits_) -
        reinterpret_cast<char*>(&start_)) + sizeof(bits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ban::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Ban)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes address = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Ban.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hash = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Ban.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Ban.reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 start = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_secs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_duration_secs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Ban)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Ban)
  return false;
#undef DO_
}

void Ban::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Ban)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional bytes address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->address(), output);
  }

  // optional uint32 bits = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bits(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Ban.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string hash = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Ban.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hash(), output);
  }

  // optional string reason = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Ban.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->reason(), output);
  }

  // optional int64 start = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->start(), output);
  }

  // optional int64 duration_secs = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->duration_secs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Ban)
}

::google::protobuf::uint8* Ban::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Ban)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional bytes address = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->address(), target);
  }

  // optional uint32 bits = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bits(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Ban.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string hash = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Ban.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hash(), target);
  }

  // optional string reason = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Ban.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reason(), target);
  }

  // optional int64 start = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->start(), target);
  }

  // optional int64 duration_secs = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->duration_secs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Ban)
  return target;
}

size_t Ban::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Ban)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hash = 5;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional int64 start = 7;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start());
    }

    // optional int64 duration_secs = 8;
    if (has_duration_secs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duration_secs());
    }

    // optional uint32 bits = 3;
    if (has_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bits());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ban::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Ban)
  GOOGLE_DCHECK_NE(&from, this);
  const Ban* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ban>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Ban)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Ban)
    MergeFrom(*source);
  }
}

void Ban::MergeFrom(const Ban& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Ban)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000020u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_secs_ = from.duration_secs_;
    }
    if (cached_has_bits & 0x00000080u) {
      bits_ = from.bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Ban::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Ban)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ban::CopyFrom(const Ban& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Ban)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ban::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Ban::Swap(Ban* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ban::InternalSwap(Ban* other) {
  using std::swap;
  address_.Swap(&other->address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(start_, other->start_);
  swap(duration_secs_, other->duration_secs_);
  swap(bits_, other->bits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Ban::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL_Group::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_Group::kNameFieldNumber;
const int ACL_Group::kInheritedFieldNumber;
const int ACL_Group::kInheritFieldNumber;
const int ACL_Group::kInheritableFieldNumber;
const int ACL_Group::kUsersAddFieldNumber;
const int ACL_Group::kUsersRemoveFieldNumber;
const int ACL_Group::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_Group::ACL_Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_Group.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.ACL.Group)
}
ACL_Group::ACL_Group(const ACL_Group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_add_(from.users_add_),
      users_remove_(from.users_remove_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&inherited_, &from.inherited_,
    static_cast<size_t>(reinterpret_cast<char*>(&inheritable_) -
    reinterpret_cast<char*>(&inherited_)) + sizeof(inheritable_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.ACL.Group)
}

void ACL_Group::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&inherited_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inheritable_) -
      reinterpret_cast<char*>(&inherited_)) + sizeof(inheritable_));
}

ACL_Group::~ACL_Group() {
  // @@protoc_insertion_point(destructor:MurmurRPC.ACL.Group)
  SharedDtor();
}

void ACL_Group::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ACL_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL_Group::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL_Group& ACL_Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_ACL_Group.base);
  return *internal_default_instance();
}


void ACL_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.ACL.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_add_.Clear();
  users_remove_.Clear();
  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  ::memset(&inherited_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inheritable_) -
      reinterpret_cast<char*>(&inherited_)) + sizeof(inheritable_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL_Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.ACL.Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.ACL.Group.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherited = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_inherited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_inherit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inheritable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_inheritable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.DatabaseUser users_add = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.DatabaseUser users_remove = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users_remove()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.DatabaseUser users = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.ACL.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.ACL.Group)
  return false;
#undef DO_
}

void ACL_Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.ACL.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ACL.Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool inherited = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->inherited(), output);
  }

  // optional bool inherit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->inherit(), output);
  }

  // optional bool inheritable = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inheritable(), output);
  }

  // repeated .MurmurRPC.DatabaseUser users_add = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_add_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->users_add(static_cast<int>(i)),
      output);
  }

  // repeated .MurmurRPC.DatabaseUser users_remove = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_remove_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->users_remove(static_cast<int>(i)),
      output);
  }

  // repeated .MurmurRPC.DatabaseUser users = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.ACL.Group)
}

::google::protobuf::uint8* ACL_Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.ACL.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ACL.Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool inherited = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->inherited(), target);
  }

  // optional bool inherit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->inherit(), target);
  }

  // optional bool inheritable = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->inheritable(), target);
  }

  // repeated .MurmurRPC.DatabaseUser users_add = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_add_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->users_add(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MurmurRPC.DatabaseUser users_remove = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_remove_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->users_remove(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MurmurRPC.DatabaseUser users = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.ACL.Group)
  return target;
}

size_t ACL_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.ACL.Group)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.DatabaseUser users_add = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->users_add_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users_add(static_cast<int>(i)));
    }
  }

  // repeated .MurmurRPC.DatabaseUser users_remove = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->users_remove_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users_remove(static_cast<int>(i)));
    }
  }

  // repeated .MurmurRPC.DatabaseUser users = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool inherited = 2;
    if (has_inherited()) {
      total_size += 1 + 1;
    }

    // optional bool inherit = 3;
    if (has_inherit()) {
      total_size += 1 + 1;
    }

    // optional bool inheritable = 4;
    if (has_inheritable()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL_Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.ACL.Group)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL_Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.ACL.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.ACL.Group)
    MergeFrom(*source);
  }
}

void ACL_Group::MergeFrom(const ACL_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.ACL.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_add_.MergeFrom(from.users_add_);
  users_remove_.MergeFrom(from.users_remove_);
  users_.MergeFrom(from.users_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      inherited_ = from.inherited_;
    }
    if (cached_has_bits & 0x00000004u) {
      inherit_ = from.inherit_;
    }
    if (cached_has_bits & 0x00000008u) {
      inheritable_ = from.inheritable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACL_Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.ACL.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_Group::CopyFrom(const ACL_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.ACL.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_Group::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users_add())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->users_remove())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void ACL_Group::Swap(ACL_Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_Group::InternalSwap(ACL_Group* other) {
  using std::swap;
  CastToBase(&users_add_)->InternalSwap(CastToBase(&other->users_add_));
  CastToBase(&users_remove_)->InternalSwap(CastToBase(&other->users_remove_));
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(inherited_, other->inherited_);
  swap(inherit_, other->inherit_);
  swap(inheritable_, other->inheritable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL_Group::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_ACL_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_ACL_Query_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
  ::MurmurRPC::_ACL_Query_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_Query::kServerFieldNumber;
const int ACL_Query::kUserFieldNumber;
const int ACL_Query::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_Query::ACL_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.ACL.Query)
}
ACL_Query::ACL_Query(const ACL_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::MurmurRPC::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.ACL.Query)
}

void ACL_Query::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&server_)) + sizeof(channel_));
}

ACL_Query::~ACL_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.ACL.Query)
  SharedDtor();
}

void ACL_Query::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete channel_;
}

void ACL_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL_Query& ACL_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_ACL_Query.base);
  return *internal_default_instance();
}


void ACL_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.ACL.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.ACL.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.ACL.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.ACL.Query)
  return false;
#undef DO_
}

void ACL_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.ACL.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.User user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user(), output);
  }

  // optional .MurmurRPC.Channel channel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.ACL.Query)
}

::google::protobuf::uint8* ACL_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.ACL.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.User user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user(), deterministic, target);
  }

  // optional .MurmurRPC.Channel channel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_channel(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.ACL.Query)
  return target;
}

size_t ACL_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.ACL.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.User user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.Channel channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.ACL.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.ACL.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.ACL.Query)
    MergeFrom(*source);
  }
}

void ACL_Query::MergeFrom(const ACL_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.ACL.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user()->::MurmurRPC::User::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
  }
}

void ACL_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.ACL.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_Query::CopyFrom(const ACL_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.ACL.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void ACL_Query::Swap(ACL_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_Query::InternalSwap(ACL_Query* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(user_, other->user_);
  swap(channel_, other->channel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL_List::InitAsDefaultInstance() {
  ::MurmurRPC::_ACL_List_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_ACL_List_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_List::kServerFieldNumber;
const int ACL_List::kChannelFieldNumber;
const int ACL_List::kAclsFieldNumber;
const int ACL_List::kGroupsFieldNumber;
const int ACL_List::kInheritFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_List::ACL_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.ACL.List)
}
ACL_List::ACL_List(const ACL_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      acls_(from.acls_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  inherit_ = from.inherit_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.ACL.List)
}

void ACL_List::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inherit_) -
      reinterpret_cast<char*>(&server_)) + sizeof(inherit_));
}

ACL_List::~ACL_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.ACL.List)
  SharedDtor();
}

void ACL_List::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete channel_;
}

void ACL_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL_List& ACL_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_ACL_List.base);
  return *internal_default_instance();
}


void ACL_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.ACL.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acls_.Clear();
  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
  }
  inherit_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.ACL.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.ACL acls = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.ACL.Group groups = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_inherit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.ACL.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.ACL.List)
  return false;
#undef DO_
}

void ACL_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.ACL.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.Channel channel = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_channel(), output);
  }

  // repeated .MurmurRPC.ACL acls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acls_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->acls(static_cast<int>(i)),
      output);
  }

  // repeated .MurmurRPC.ACL.Group groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->groups(static_cast<int>(i)),
      output);
  }

  // optional bool inherit = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->inherit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.ACL.List)
}

::google::protobuf::uint8* ACL_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.ACL.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.Channel channel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_channel(), deterministic, target);
  }

  // repeated .MurmurRPC.ACL acls = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acls_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->acls(static_cast<int>(i)), deterministic, target);
  }

  // repeated .MurmurRPC.ACL.Group groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->groups(static_cast<int>(i)), deterministic, target);
  }

  // optional bool inherit = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->inherit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.ACL.List)
  return target;
}

size_t ACL_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.ACL.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.ACL acls = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->acls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acls(static_cast<int>(i)));
    }
  }

  // repeated .MurmurRPC.ACL.Group groups = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.Channel channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

    // optional bool inherit = 5;
    if (has_inherit()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.ACL.List)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.ACL.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.ACL.List)
    MergeFrom(*source);
  }
}

void ACL_List::MergeFrom(const ACL_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.ACL.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acls_.MergeFrom(from.acls_);
  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
    if (cached_has_bits & 0x00000004u) {
      inherit_ = from.inherit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACL_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.ACL.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_List::CopyFrom(const ACL_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.ACL.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->acls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  return true;
}

void ACL_List::Swap(ACL_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_List::InternalSwap(ACL_List* other) {
  using std::swap;
  CastToBase(&acls_)->InternalSwap(CastToBase(&other->acls_));
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  swap(server_, other->server_);
  swap(channel_, other->channel_);
  swap(inherit_, other->inherit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL_TemporaryGroup::InitAsDefaultInstance() {
  ::MurmurRPC::_ACL_TemporaryGroup_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_ACL_TemporaryGroup_default_instance_._instance.get_mutable()->channel_ = const_cast< ::MurmurRPC::Channel*>(
      ::MurmurRPC::Channel::internal_default_instance());
  ::MurmurRPC::_ACL_TemporaryGroup_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL_TemporaryGroup::kServerFieldNumber;
const int ACL_TemporaryGroup::kChannelFieldNumber;
const int ACL_TemporaryGroup::kUserFieldNumber;
const int ACL_TemporaryGroup::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL_TemporaryGroup::ACL_TemporaryGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_ACL_TemporaryGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.ACL.TemporaryGroup)
}
ACL_TemporaryGroup::ACL_TemporaryGroup(const ACL_TemporaryGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_channel()) {
    channel_ = new ::MurmurRPC::Channel(*from.channel_);
  } else {
    channel_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::MurmurRPC::User(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.ACL.TemporaryGroup)
}

void ACL_TemporaryGroup::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_) -
      reinterpret_cast<char*>(&server_)) + sizeof(user_));
}

ACL_TemporaryGroup::~ACL_TemporaryGroup() {
  // @@protoc_insertion_point(destructor:MurmurRPC.ACL.TemporaryGroup)
  SharedDtor();
}

void ACL_TemporaryGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete user_;
}

void ACL_TemporaryGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL_TemporaryGroup::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL_TemporaryGroup& ACL_TemporaryGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_ACL_TemporaryGroup.base);
  return *internal_default_instance();
}


void ACL_TemporaryGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.ACL.TemporaryGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(channel_ != NULL);
      channel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL_TemporaryGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.ACL.TemporaryGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Channel channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_channel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User user = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.ACL.TemporaryGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.ACL.TemporaryGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.ACL.TemporaryGroup)
  return false;
#undef DO_
}

void ACL_TemporaryGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.ACL.TemporaryGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.Channel channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_channel(), output);
  }

  // optional .MurmurRPC.User user = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_user(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ACL.TemporaryGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.ACL.TemporaryGroup)
}

::google::protobuf::uint8* ACL_TemporaryGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.ACL.TemporaryGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.Channel channel = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_channel(), deterministic, target);
  }

  // optional .MurmurRPC.User user = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_user(), deterministic, target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.ACL.TemporaryGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.ACL.TemporaryGroup)
  return target;
}

size_t ACL_TemporaryGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.ACL.TemporaryGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.Channel channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *channel_);
    }

    // optional .MurmurRPC.User user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL_TemporaryGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.ACL.TemporaryGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL_TemporaryGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL_TemporaryGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.ACL.TemporaryGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.ACL.TemporaryGroup)
    MergeFrom(*source);
  }
}

void ACL_TemporaryGroup::MergeFrom(const ACL_TemporaryGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.ACL.TemporaryGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_channel()->::MurmurRPC::Channel::MergeFrom(from.channel());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_user()->::MurmurRPC::User::MergeFrom(from.user());
    }
  }
}

void ACL_TemporaryGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.ACL.TemporaryGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL_TemporaryGroup::CopyFrom(const ACL_TemporaryGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.ACL.TemporaryGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL_TemporaryGroup::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_channel()) {
    if (!this->channel_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void ACL_TemporaryGroup::Swap(ACL_TemporaryGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL_TemporaryGroup::InternalSwap(ACL_TemporaryGroup* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(channel_, other->channel_);
  swap(user_, other->user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL_TemporaryGroup::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ACL::InitAsDefaultInstance() {
  ::MurmurRPC::_ACL_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::DatabaseUser*>(
      ::MurmurRPC::DatabaseUser::internal_default_instance());
  ::MurmurRPC::_ACL_default_instance_._instance.get_mutable()->group_ = const_cast< ::MurmurRPC::ACL_Group*>(
      ::MurmurRPC::ACL_Group::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ACL::kApplyHereFieldNumber;
const int ACL::kApplySubsFieldNumber;
const int ACL::kInheritedFieldNumber;
const int ACL::kUserFieldNumber;
const int ACL::kGroupFieldNumber;
const int ACL::kAllowFieldNumber;
const int ACL::kDenyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ACL::ACL()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_ACL.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.ACL)
}
ACL::ACL(const ACL& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::MurmurRPC::DatabaseUser(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_group()) {
    group_ = new ::MurmurRPC::ACL_Group(*from.group_);
  } else {
    group_ = NULL;
  }
  ::memcpy(&apply_here_, &from.apply_here_,
    static_cast<size_t>(reinterpret_cast<char*>(&deny_) -
    reinterpret_cast<char*>(&apply_here_)) + sizeof(deny_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.ACL)
}

void ACL::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deny_) -
      reinterpret_cast<char*>(&user_)) + sizeof(deny_));
}

ACL::~ACL() {
  // @@protoc_insertion_point(destructor:MurmurRPC.ACL)
  SharedDtor();
}

void ACL::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete group_;
}

void ACL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ACL::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ACL& ACL::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_ACL.base);
  return *internal_default_instance();
}


void ACL::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.ACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(group_ != NULL);
      group_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&apply_here_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deny_) -
        reinterpret_cast<char*>(&apply_here_)) + sizeof(deny_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ACL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.ACL)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool apply_here = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_apply_here();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_here_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool apply_subs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_apply_subs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &apply_subs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inherited = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_inherited();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inherited_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.DatabaseUser user = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.ACL.Group group = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 allow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_allow();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deny = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_deny();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.ACL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.ACL)
  return false;
#undef DO_
}

void ACL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.ACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool apply_here = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->apply_here(), output);
  }

  // optional bool apply_subs = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->apply_subs(), output);
  }

  // optional bool inherited = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->inherited(), output);
  }

  // optional .MurmurRPC.DatabaseUser user = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_user(), output);
  }

  // optional .MurmurRPC.ACL.Group group = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_group(), output);
  }

  // optional uint32 allow = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->allow(), output);
  }

  // optional uint32 deny = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->deny(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.ACL)
}

::google::protobuf::uint8* ACL::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.ACL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool apply_here = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->apply_here(), target);
  }

  // optional bool apply_subs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->apply_subs(), target);
  }

  // optional bool inherited = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->inherited(), target);
  }

  // optional .MurmurRPC.DatabaseUser user = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_user(), deterministic, target);
  }

  // optional .MurmurRPC.ACL.Group group = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_group(), deterministic, target);
  }

  // optional uint32 allow = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->allow(), target);
  }

  // optional uint32 deny = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->deny(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.ACL)
  return target;
}

size_t ACL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.ACL)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .MurmurRPC.DatabaseUser user = 6;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.ACL.Group group = 7;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *group_);
    }

    // optional bool apply_here = 3;
    if (has_apply_here()) {
      total_size += 1 + 1;
    }

    // optional bool apply_subs = 4;
    if (has_apply_subs()) {
      total_size += 1 + 1;
    }

    // optional bool inherited = 5;
    if (has_inherited()) {
      total_size += 1 + 1;
    }

    // optional uint32 allow = 8;
    if (has_allow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allow());
    }

    // optional uint32 deny = 9;
    if (has_deny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deny());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ACL::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.ACL)
  GOOGLE_DCHECK_NE(&from, this);
  const ACL* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ACL>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.ACL)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.ACL)
    MergeFrom(*source);
  }
}

void ACL::MergeFrom(const ACL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.ACL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user()->::MurmurRPC::DatabaseUser::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_group()->::MurmurRPC::ACL_Group::MergeFrom(from.group());
    }
    if (cached_has_bits & 0x00000004u) {
      apply_here_ = from.apply_here_;
    }
    if (cached_has_bits & 0x00000008u) {
      apply_subs_ = from.apply_subs_;
    }
    if (cached_has_bits & 0x00000010u) {
      inherited_ = from.inherited_;
    }
    if (cached_has_bits & 0x00000020u) {
      allow_ = from.allow_;
    }
    if (cached_has_bits & 0x00000040u) {
      deny_ = from.deny_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ACL::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.ACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACL::CopyFrom(const ACL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.ACL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACL::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_group()) {
    if (!this->group_->IsInitialized()) return false;
  }
  return true;
}

void ACL::Swap(ACL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ACL::InternalSwap(ACL* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(group_, other->group_);
  swap(apply_here_, other->apply_here_);
  swap(apply_subs_, other->apply_subs_);
  swap(inherited_, other->inherited_);
  swap(allow_, other->allow_);
  swap(deny_, other->deny_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ACL::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request_Authenticate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request_Authenticate::kNameFieldNumber;
const int Authenticator_Request_Authenticate::kPasswordFieldNumber;
const int Authenticator_Request_Authenticate::kCertificatesFieldNumber;
const int Authenticator_Request_Authenticate::kCertificateHashFieldNumber;
const int Authenticator_Request_Authenticate::kStrongCertificateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request_Authenticate::Authenticator_Request_Authenticate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Authenticate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request.Authenticate)
}
Authenticator_Request_Authenticate::Authenticator_Request_Authenticate(const Authenticator_Request_Authenticate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      certificates_(from.certificates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  certificate_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_certificate_hash()) {
    certificate_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificate_hash_);
  }
  strong_certificate_ = from.strong_certificate_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request.Authenticate)
}

void Authenticator_Request_Authenticate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strong_certificate_ = false;
}

Authenticator_Request_Authenticate::~Authenticator_Request_Authenticate() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request.Authenticate)
  SharedDtor();
}

void Authenticator_Request_Authenticate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  certificate_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authenticator_Request_Authenticate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request_Authenticate::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request_Authenticate& Authenticator_Request_Authenticate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Authenticate.base);
  return *internal_default_instance();
}


void Authenticator_Request_Authenticate::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  certificates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      certificate_hash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  strong_certificate_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request_Authenticate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request.Authenticate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Authenticator.Request.Authenticate.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Authenticator.Request.Authenticate.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes certificates = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_certificates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string certificate_hash = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_certificate_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->certificate_hash().data(), static_cast<int>(this->certificate_hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Authenticator.Request.Authenticate.certificate_hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool strong_certificate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_strong_certificate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &strong_certificate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request.Authenticate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request.Authenticate)
  return false;
#undef DO_
}

void Authenticator_Request_Authenticate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Authenticate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Authenticate.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated bytes certificates = 3;
  for (int i = 0, n = this->certificates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->certificates(i), output);
  }

  // optional string certificate_hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certificate_hash().data(), static_cast<int>(this->certificate_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Authenticate.certificate_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->certificate_hash(), output);
  }

  // optional bool strong_certificate = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->strong_certificate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request.Authenticate)
}

::google::protobuf::uint8* Authenticator_Request_Authenticate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Authenticate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string password = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Authenticate.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated bytes certificates = 3;
  for (int i = 0, n = this->certificates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->certificates(i), target);
  }

  // optional string certificate_hash = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->certificate_hash().data(), static_cast<int>(this->certificate_hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Authenticate.certificate_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->certificate_hash(), target);
  }

  // optional bool strong_certificate = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->strong_certificate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request.Authenticate)
  return target;
}

size_t Authenticator_Request_Authenticate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request.Authenticate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated bytes certificates = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->certificates_size());
  for (int i = 0, n = this->certificates_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->certificates(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string certificate_hash = 4;
    if (has_certificate_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->certificate_hash());
    }

    // optional bool strong_certificate = 5;
    if (has_strong_certificate()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request_Authenticate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request_Authenticate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request_Authenticate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request.Authenticate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request.Authenticate)
    MergeFrom(*source);
  }
}

void Authenticator_Request_Authenticate::MergeFrom(const Authenticator_Request_Authenticate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  certificates_.MergeFrom(from.certificates_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_certificate_hash();
      certificate_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.certificate_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      strong_certificate_ = from.strong_certificate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Authenticator_Request_Authenticate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request_Authenticate::CopyFrom(const Authenticator_Request_Authenticate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request_Authenticate::IsInitialized() const {
  return true;
}

void Authenticator_Request_Authenticate::Swap(Authenticator_Request_Authenticate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request_Authenticate::InternalSwap(Authenticator_Request_Authenticate* other) {
  using std::swap;
  certificates_.InternalSwap(CastToBase(&other->certificates_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  certificate_hash_.Swap(&other->certificate_hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(strong_certificate_, other->strong_certificate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request_Authenticate::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request_Find::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request_Find::kIdFieldNumber;
const int Authenticator_Request_Find::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request_Find::Authenticator_Request_Find()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Find.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request.Find)
}
Authenticator_Request_Find::Authenticator_Request_Find(const Authenticator_Request_Find& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request.Find)
}

void Authenticator_Request_Find::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

Authenticator_Request_Find::~Authenticator_Request_Find() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request.Find)
  SharedDtor();
}

void Authenticator_Request_Find::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authenticator_Request_Find::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request_Find::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request_Find& Authenticator_Request_Find::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Find.base);
  return *internal_default_instance();
}


void Authenticator_Request_Find::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request.Find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request_Find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request.Find)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Authenticator.Request.Find.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request.Find)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request.Find)
  return false;
#undef DO_
}

void Authenticator_Request_Find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request.Find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Find.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request.Find)
}

::google::protobuf::uint8* Authenticator_Request_Find::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request.Find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Find.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request.Find)
  return target;
}

size_t Authenticator_Request_Find::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request.Find)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request_Find::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request.Find)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request_Find* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request_Find>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request.Find)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request.Find)
    MergeFrom(*source);
  }
}

void Authenticator_Request_Find::MergeFrom(const Authenticator_Request_Find& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request.Find)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Authenticator_Request_Find::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request.Find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request_Find::CopyFrom(const Authenticator_Request_Find& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request.Find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request_Find::IsInitialized() const {
  return true;
}

void Authenticator_Request_Find::Swap(Authenticator_Request_Find* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request_Find::InternalSwap(Authenticator_Request_Find* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request_Find::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request_Query::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request_Query::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request_Query::Authenticator_Request_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request.Query)
}
Authenticator_Request_Query::Authenticator_Request_Query(const Authenticator_Request_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request.Query)
}

void Authenticator_Request_Query::SharedCtor() {
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Authenticator_Request_Query::~Authenticator_Request_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request.Query)
  SharedDtor();
}

void Authenticator_Request_Query::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authenticator_Request_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request_Query& Authenticator_Request_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Query.base);
  return *internal_default_instance();
}


void Authenticator_Request_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filter_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Authenticator.Request.Query.filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request.Query)
  return false;
#undef DO_
}

void Authenticator_Request_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Query.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request.Query)
}

::google::protobuf::uint8* Authenticator_Request_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Request.Query.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request.Query)
  return target;
}

size_t Authenticator_Request_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string filter = 1;
  if (has_filter()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request.Query)
    MergeFrom(*source);
  }
}

void Authenticator_Request_Query::MergeFrom(const Authenticator_Request_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_filter()) {
    set_has_filter();
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
}

void Authenticator_Request_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request_Query::CopyFrom(const Authenticator_Request_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request_Query::IsInitialized() const {
  return true;
}

void Authenticator_Request_Query::Swap(Authenticator_Request_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request_Query::InternalSwap(Authenticator_Request_Query* other) {
  using std::swap;
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request_Register::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Request_Register_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::DatabaseUser*>(
      ::MurmurRPC::DatabaseUser::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request_Register::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request_Register::Authenticator_Request_Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Register.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request.Register)
}
Authenticator_Request_Register::Authenticator_Request_Register(const Authenticator_Request_Register& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::MurmurRPC::DatabaseUser(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request.Register)
}

void Authenticator_Request_Register::SharedCtor() {
  user_ = NULL;
}

Authenticator_Request_Register::~Authenticator_Request_Register() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request.Register)
  SharedDtor();
}

void Authenticator_Request_Register::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void Authenticator_Request_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request_Register::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request_Register& Authenticator_Request_Register::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Register.base);
  return *internal_default_instance();
}


void Authenticator_Request_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request.Register)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.DatabaseUser user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request.Register)
  return false;
#undef DO_
}

void Authenticator_Request_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request.Register)
}

::google::protobuf::uint8* Authenticator_Request_Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request.Register)
  return target;
}

size_t Authenticator_Request_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request.Register)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request_Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request.Register)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request_Register* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request_Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request.Register)
    MergeFrom(*source);
  }
}

void Authenticator_Request_Register::MergeFrom(const Authenticator_Request_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request.Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::MurmurRPC::DatabaseUser::MergeFrom(from.user());
  }
}

void Authenticator_Request_Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request_Register::CopyFrom(const Authenticator_Request_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request_Register::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Request_Register::Swap(Authenticator_Request_Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request_Register::InternalSwap(Authenticator_Request_Register* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request_Register::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request_Deregister::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Request_Deregister_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::DatabaseUser*>(
      ::MurmurRPC::DatabaseUser::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request_Deregister::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request_Deregister::Authenticator_Request_Deregister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Deregister.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request.Deregister)
}
Authenticator_Request_Deregister::Authenticator_Request_Deregister(const Authenticator_Request_Deregister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::MurmurRPC::DatabaseUser(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request.Deregister)
}

void Authenticator_Request_Deregister::SharedCtor() {
  user_ = NULL;
}

Authenticator_Request_Deregister::~Authenticator_Request_Deregister() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request.Deregister)
  SharedDtor();
}

void Authenticator_Request_Deregister::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void Authenticator_Request_Deregister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request_Deregister::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request_Deregister& Authenticator_Request_Deregister::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Deregister.base);
  return *internal_default_instance();
}


void Authenticator_Request_Deregister::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request.Deregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request_Deregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request.Deregister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.DatabaseUser user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request.Deregister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request.Deregister)
  return false;
#undef DO_
}

void Authenticator_Request_Deregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request.Deregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request.Deregister)
}

::google::protobuf::uint8* Authenticator_Request_Deregister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request.Deregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request.Deregister)
  return target;
}

size_t Authenticator_Request_Deregister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request.Deregister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request_Deregister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request.Deregister)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request_Deregister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request_Deregister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request.Deregister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request.Deregister)
    MergeFrom(*source);
  }
}

void Authenticator_Request_Deregister::MergeFrom(const Authenticator_Request_Deregister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request.Deregister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::MurmurRPC::DatabaseUser::MergeFrom(from.user());
  }
}

void Authenticator_Request_Deregister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request.Deregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request_Deregister::CopyFrom(const Authenticator_Request_Deregister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request.Deregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request_Deregister::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Request_Deregister::Swap(Authenticator_Request_Deregister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request_Deregister::InternalSwap(Authenticator_Request_Deregister* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request_Deregister::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request_Update::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Request_Update_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::DatabaseUser*>(
      ::MurmurRPC::DatabaseUser::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request_Update::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request_Update::Authenticator_Request_Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Update.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request.Update)
}
Authenticator_Request_Update::Authenticator_Request_Update(const Authenticator_Request_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::MurmurRPC::DatabaseUser(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request.Update)
}

void Authenticator_Request_Update::SharedCtor() {
  user_ = NULL;
}

Authenticator_Request_Update::~Authenticator_Request_Update() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request.Update)
  SharedDtor();
}

void Authenticator_Request_Update::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void Authenticator_Request_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request_Update::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request_Update& Authenticator_Request_Update::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request_Update.base);
  return *internal_default_instance();
}


void Authenticator_Request_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request.Update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.DatabaseUser user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request.Update)
  return false;
#undef DO_
}

void Authenticator_Request_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request.Update)
}

::google::protobuf::uint8* Authenticator_Request_Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request.Update)
  return target;
}

size_t Authenticator_Request_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request.Update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request_Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request_Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request.Update)
    MergeFrom(*source);
  }
}

void Authenticator_Request_Update::MergeFrom(const Authenticator_Request_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::MurmurRPC::DatabaseUser::MergeFrom(from.user());
  }
}

void Authenticator_Request_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request_Update::CopyFrom(const Authenticator_Request_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request_Update::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Request_Update::Swap(Authenticator_Request_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request_Update::InternalSwap(Authenticator_Request_Update* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request_Update::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Request::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Request_default_instance_._instance.get_mutable()->authenticate_ = const_cast< ::MurmurRPC::Authenticator_Request_Authenticate*>(
      ::MurmurRPC::Authenticator_Request_Authenticate::internal_default_instance());
  ::MurmurRPC::_Authenticator_Request_default_instance_._instance.get_mutable()->find_ = const_cast< ::MurmurRPC::Authenticator_Request_Find*>(
      ::MurmurRPC::Authenticator_Request_Find::internal_default_instance());
  ::MurmurRPC::_Authenticator_Request_default_instance_._instance.get_mutable()->query_ = const_cast< ::MurmurRPC::Authenticator_Request_Query*>(
      ::MurmurRPC::Authenticator_Request_Query::internal_default_instance());
  ::MurmurRPC::_Authenticator_Request_default_instance_._instance.get_mutable()->register__ = const_cast< ::MurmurRPC::Authenticator_Request_Register*>(
      ::MurmurRPC::Authenticator_Request_Register::internal_default_instance());
  ::MurmurRPC::_Authenticator_Request_default_instance_._instance.get_mutable()->deregister_ = const_cast< ::MurmurRPC::Authenticator_Request_Deregister*>(
      ::MurmurRPC::Authenticator_Request_Deregister::internal_default_instance());
  ::MurmurRPC::_Authenticator_Request_default_instance_._instance.get_mutable()->update_ = const_cast< ::MurmurRPC::Authenticator_Request_Update*>(
      ::MurmurRPC::Authenticator_Request_Update::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Request::kAuthenticateFieldNumber;
const int Authenticator_Request::kFindFieldNumber;
const int Authenticator_Request::kQueryFieldNumber;
const int Authenticator_Request::kRegisterFieldNumber;
const int Authenticator_Request::kDeregisterFieldNumber;
const int Authenticator_Request::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Request::Authenticator_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Request)
}
Authenticator_Request::Authenticator_Request(const Authenticator_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_authenticate()) {
    authenticate_ = new ::MurmurRPC::Authenticator_Request_Authenticate(*from.authenticate_);
  } else {
    authenticate_ = NULL;
  }
  if (from.has_find()) {
    find_ = new ::MurmurRPC::Authenticator_Request_Find(*from.find_);
  } else {
    find_ = NULL;
  }
  if (from.has_query()) {
    query_ = new ::MurmurRPC::Authenticator_Request_Query(*from.query_);
  } else {
    query_ = NULL;
  }
  if (from.has_register_()) {
    register__ = new ::MurmurRPC::Authenticator_Request_Register(*from.register__);
  } else {
    register__ = NULL;
  }
  if (from.has_deregister()) {
    deregister_ = new ::MurmurRPC::Authenticator_Request_Deregister(*from.deregister_);
  } else {
    deregister_ = NULL;
  }
  if (from.has_update()) {
    update_ = new ::MurmurRPC::Authenticator_Request_Update(*from.update_);
  } else {
    update_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Request)
}

void Authenticator_Request::SharedCtor() {
  ::memset(&authenticate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&authenticate_)) + sizeof(update_));
}

Authenticator_Request::~Authenticator_Request() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Request)
  SharedDtor();
}

void Authenticator_Request::SharedDtor() {
  if (this != internal_default_instance()) delete authenticate_;
  if (this != internal_default_instance()) delete find_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete register__;
  if (this != internal_default_instance()) delete deregister_;
  if (this != internal_default_instance()) delete update_;
}

void Authenticator_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Request::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Request& Authenticator_Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Request.base);
  return *internal_default_instance();
}


void Authenticator_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(authenticate_ != NULL);
      authenticate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(find_ != NULL);
      find_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(query_ != NULL);
      query_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(register__ != NULL);
      register__->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(deregister_ != NULL);
      deregister_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(update_ != NULL);
      update_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Authenticator.Request.Authenticate authenticate = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authenticate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Request.Find find = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_find()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Request.Query query = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Request.Register register = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Request.Deregister deregister = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deregister()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Request.Update update = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Request)
  return false;
#undef DO_
}

void Authenticator_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Request.Authenticate authenticate = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_authenticate(), output);
  }

  // optional .MurmurRPC.Authenticator.Request.Find find = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_find(), output);
  }

  // optional .MurmurRPC.Authenticator.Request.Query query = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_query(), output);
  }

  // optional .MurmurRPC.Authenticator.Request.Register register = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_register_(), output);
  }

  // optional .MurmurRPC.Authenticator.Request.Deregister deregister = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_deregister(), output);
  }

  // optional .MurmurRPC.Authenticator.Request.Update update = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Request)
}

::google::protobuf::uint8* Authenticator_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Request.Authenticate authenticate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_authenticate(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Request.Find find = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_find(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Request.Query query = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_query(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Request.Register register = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_register_(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Request.Deregister deregister = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_deregister(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Request.Update update = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_update(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Request)
  return target;
}

size_t Authenticator_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .MurmurRPC.Authenticator.Request.Authenticate authenticate = 1;
    if (has_authenticate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authenticate_);
    }

    // optional .MurmurRPC.Authenticator.Request.Find find = 2;
    if (has_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *find_);
    }

    // optional .MurmurRPC.Authenticator.Request.Query query = 3;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_);
    }

    // optional .MurmurRPC.Authenticator.Request.Register register = 4;
    if (has_register_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *register__);
    }

    // optional .MurmurRPC.Authenticator.Request.Deregister deregister = 5;
    if (has_deregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *deregister_);
    }

    // optional .MurmurRPC.Authenticator.Request.Update update = 6;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Request)
    MergeFrom(*source);
  }
}

void Authenticator_Request::MergeFrom(const Authenticator_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_authenticate()->::MurmurRPC::Authenticator_Request_Authenticate::MergeFrom(from.authenticate());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_find()->::MurmurRPC::Authenticator_Request_Find::MergeFrom(from.find());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_query()->::MurmurRPC::Authenticator_Request_Query::MergeFrom(from.query());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_register_()->::MurmurRPC::Authenticator_Request_Register::MergeFrom(from.register_());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_deregister()->::MurmurRPC::Authenticator_Request_Deregister::MergeFrom(from.deregister());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_update()->::MurmurRPC::Authenticator_Request_Update::MergeFrom(from.update());
    }
  }
}

void Authenticator_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Request::CopyFrom(const Authenticator_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Request::IsInitialized() const {
  if (has_register_()) {
    if (!this->register__->IsInitialized()) return false;
  }
  if (has_deregister()) {
    if (!this->deregister_->IsInitialized()) return false;
  }
  if (has_update()) {
    if (!this->update_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Request::Swap(Authenticator_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Request::InternalSwap(Authenticator_Request* other) {
  using std::swap;
  swap(authenticate_, other->authenticate_);
  swap(find_, other->find_);
  swap(query_, other->query_);
  swap(register__, other->register__);
  swap(deregister_, other->deregister_);
  swap(update_, other->update_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Request::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Initialize::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Response_Initialize_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Initialize::kServerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Initialize::Authenticator_Response_Initialize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Initialize.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Initialize)
}
Authenticator_Response_Initialize::Authenticator_Response_Initialize(const Authenticator_Response_Initialize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Initialize)
}

void Authenticator_Response_Initialize::SharedCtor() {
  server_ = NULL;
}

Authenticator_Response_Initialize::~Authenticator_Response_Initialize() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Initialize)
  SharedDtor();
}

void Authenticator_Response_Initialize::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void Authenticator_Response_Initialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Initialize::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Initialize& Authenticator_Response_Initialize::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Initialize.base);
  return *internal_default_instance();
}


void Authenticator_Response_Initialize::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Initialize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Initialize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Initialize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Initialize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Initialize)
  return false;
#undef DO_
}

void Authenticator_Response_Initialize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Initialize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Initialize)
}

::google::protobuf::uint8* Authenticator_Response_Initialize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Initialize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Initialize)
  return target;
}

size_t Authenticator_Response_Initialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Initialize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Initialize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Initialize)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Initialize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Initialize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Initialize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Initialize)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Initialize::MergeFrom(const Authenticator_Response_Initialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Initialize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void Authenticator_Response_Initialize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Initialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Initialize::CopyFrom(const Authenticator_Response_Initialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Initialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Initialize::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Response_Initialize::Swap(Authenticator_Response_Initialize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Initialize::InternalSwap(Authenticator_Response_Initialize* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Initialize::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Authenticate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Authenticate::kStatusFieldNumber;
const int Authenticator_Response_Authenticate::kIdFieldNumber;
const int Authenticator_Response_Authenticate::kNameFieldNumber;
const int Authenticator_Response_Authenticate::kGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Authenticate::Authenticator_Response_Authenticate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Authenticate.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Authenticate)
}
Authenticator_Response_Authenticate::Authenticator_Response_Authenticate(const Authenticator_Response_Authenticate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&status_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Authenticate)
}

void Authenticator_Response_Authenticate::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&status_)) + sizeof(id_));
}

Authenticator_Response_Authenticate::~Authenticator_Response_Authenticate() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Authenticate)
  SharedDtor();
}

void Authenticator_Response_Authenticate::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Authenticator_Response_Authenticate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Authenticate::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Authenticate& Authenticator_Response_Authenticate::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Authenticate.base);
  return *internal_default_instance();
}


void Authenticator_Response_Authenticate::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&status_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Authenticate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Authenticate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Authenticator.Response.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::Authenticator_Response_Status_IsValid(value)) {
            set_status(static_cast< ::MurmurRPC::Authenticator_Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.Authenticator.Response.Authenticate.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.ACL.Group groups = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Authenticate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Authenticate)
  return false;
#undef DO_
}

void Authenticator_Response_Authenticate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Response.Authenticate.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // repeated .MurmurRPC.ACL.Group groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->groups(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Authenticate)
}

::google::protobuf::uint8* Authenticator_Response_Authenticate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Authenticate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.Authenticator.Response.Authenticate.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // repeated .MurmurRPC.ACL.Group groups = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->groups(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Authenticate)
  return target;
}

size_t Authenticator_Response_Authenticate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Authenticate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.ACL.Group groups = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->groups(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .MurmurRPC.Authenticator.Response.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Authenticate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Authenticate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Authenticate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Authenticate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Authenticate)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Authenticate::MergeFrom(const Authenticator_Response_Authenticate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Authenticate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Authenticator_Response_Authenticate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Authenticate::CopyFrom(const Authenticator_Response_Authenticate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Authenticate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Authenticate::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->groups())) return false;
  return true;
}

void Authenticator_Response_Authenticate::Swap(Authenticator_Response_Authenticate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Authenticate::InternalSwap(Authenticator_Response_Authenticate* other) {
  using std::swap;
  CastToBase(&groups_)->InternalSwap(CastToBase(&other->groups_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Authenticate::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Find::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Response_Find_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::DatabaseUser*>(
      ::MurmurRPC::DatabaseUser::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Find::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Find::Authenticator_Response_Find()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Find.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Find)
}
Authenticator_Response_Find::Authenticator_Response_Find(const Authenticator_Response_Find& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::MurmurRPC::DatabaseUser(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Find)
}

void Authenticator_Response_Find::SharedCtor() {
  user_ = NULL;
}

Authenticator_Response_Find::~Authenticator_Response_Find() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Find)
  SharedDtor();
}

void Authenticator_Response_Find::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void Authenticator_Response_Find::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Find::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Find& Authenticator_Response_Find::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Find.base);
  return *internal_default_instance();
}


void Authenticator_Response_Find::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Find::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Find)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.DatabaseUser user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Find)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Find)
  return false;
#undef DO_
}

void Authenticator_Response_Find::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Find)
}

::google::protobuf::uint8* Authenticator_Response_Find::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Find)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Find)
  return target;
}

size_t Authenticator_Response_Find::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Find)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.DatabaseUser user = 1;
  if (has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Find::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Find)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Find* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Find>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Find)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Find)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Find::MergeFrom(const Authenticator_Response_Find& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Find)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::MurmurRPC::DatabaseUser::MergeFrom(from.user());
  }
}

void Authenticator_Response_Find::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Find::CopyFrom(const Authenticator_Response_Find& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Find)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Find::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Response_Find::Swap(Authenticator_Response_Find* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Find::InternalSwap(Authenticator_Response_Find* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Find::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Query::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Query::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Query::Authenticator_Response_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Query)
}
Authenticator_Response_Query::Authenticator_Response_Query(const Authenticator_Response_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Query)
}

void Authenticator_Response_Query::SharedCtor() {
}

Authenticator_Response_Query::~Authenticator_Response_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Query)
  SharedDtor();
}

void Authenticator_Response_Query::SharedDtor() {
}

void Authenticator_Response_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Query& Authenticator_Response_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Query.base);
  return *internal_default_instance();
}


void Authenticator_Response_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MurmurRPC.DatabaseUser users = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Query)
  return false;
#undef DO_
}

void Authenticator_Response_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MurmurRPC.DatabaseUser users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Query)
}

::google::protobuf::uint8* Authenticator_Response_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MurmurRPC.DatabaseUser users = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Query)
  return target;
}

size_t Authenticator_Response_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.DatabaseUser users = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Query)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Query::MergeFrom(const Authenticator_Response_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
}

void Authenticator_Response_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Query::CopyFrom(const Authenticator_Response_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Query::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void Authenticator_Response_Query::Swap(Authenticator_Response_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Query::InternalSwap(Authenticator_Response_Query* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Register::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Response_Register_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::DatabaseUser*>(
      ::MurmurRPC::DatabaseUser::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Register::kStatusFieldNumber;
const int Authenticator_Response_Register::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Register::Authenticator_Response_Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Register.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Register)
}
Authenticator_Response_Register::Authenticator_Response_Register(const Authenticator_Response_Register& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::MurmurRPC::DatabaseUser(*from.user_);
  } else {
    user_ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Register)
}

void Authenticator_Response_Register::SharedCtor() {
  ::memset(&user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&user_)) + sizeof(status_));
}

Authenticator_Response_Register::~Authenticator_Response_Register() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Register)
  SharedDtor();
}

void Authenticator_Response_Register::SharedDtor() {
  if (this != internal_default_instance()) delete user_;
}

void Authenticator_Response_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Register::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Register& Authenticator_Response_Register::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Register.base);
  return *internal_default_instance();
}


void Authenticator_Response_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_ != NULL);
    user_->Clear();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Register)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Authenticator.Response.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::Authenticator_Response_Status_IsValid(value)) {
            set_status(static_cast< ::MurmurRPC::Authenticator_Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.DatabaseUser user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Register)
  return false;
#undef DO_
}

void Authenticator_Response_Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional .MurmurRPC.DatabaseUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Register)
}

::google::protobuf::uint8* Authenticator_Response_Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Register)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional .MurmurRPC.DatabaseUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Register)
  return target;
}

size_t Authenticator_Response_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Register)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .MurmurRPC.DatabaseUser user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.Authenticator.Response.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Register)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Register* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Register)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Register::MergeFrom(const Authenticator_Response_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user()->::MurmurRPC::DatabaseUser::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Authenticator_Response_Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Register::CopyFrom(const Authenticator_Response_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Register::IsInitialized() const {
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Response_Register::Swap(Authenticator_Response_Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Register::InternalSwap(Authenticator_Response_Register* other) {
  using std::swap;
  swap(user_, other->user_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Register::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Deregister::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Deregister::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Deregister::Authenticator_Response_Deregister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Deregister.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Deregister)
}
Authenticator_Response_Deregister::Authenticator_Response_Deregister(const Authenticator_Response_Deregister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Deregister)
}

void Authenticator_Response_Deregister::SharedCtor() {
  status_ = 0;
}

Authenticator_Response_Deregister::~Authenticator_Response_Deregister() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Deregister)
  SharedDtor();
}

void Authenticator_Response_Deregister::SharedDtor() {
}

void Authenticator_Response_Deregister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Deregister::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Deregister& Authenticator_Response_Deregister::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Deregister.base);
  return *internal_default_instance();
}


void Authenticator_Response_Deregister::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Deregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Deregister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Deregister)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Authenticator.Response.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::Authenticator_Response_Status_IsValid(value)) {
            set_status(static_cast< ::MurmurRPC::Authenticator_Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Deregister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Deregister)
  return false;
#undef DO_
}

void Authenticator_Response_Deregister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Deregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Deregister)
}

::google::protobuf::uint8* Authenticator_Response_Deregister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Deregister)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Deregister)
  return target;
}

size_t Authenticator_Response_Deregister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Deregister)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Deregister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Deregister)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Deregister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Deregister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Deregister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Deregister)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Deregister::MergeFrom(const Authenticator_Response_Deregister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Deregister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void Authenticator_Response_Deregister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Deregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Deregister::CopyFrom(const Authenticator_Response_Deregister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Deregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Deregister::IsInitialized() const {
  return true;
}

void Authenticator_Response_Deregister::Swap(Authenticator_Response_Deregister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Deregister::InternalSwap(Authenticator_Response_Deregister* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Deregister::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response_Update::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response_Update::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response_Update::Authenticator_Response_Update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Update.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response.Update)
}
Authenticator_Response_Update::Authenticator_Response_Update(const Authenticator_Response_Update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response.Update)
}

void Authenticator_Response_Update::SharedCtor() {
  status_ = 0;
}

Authenticator_Response_Update::~Authenticator_Response_Update() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response.Update)
  SharedDtor();
}

void Authenticator_Response_Update::SharedDtor() {
}

void Authenticator_Response_Update::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response_Update::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response_Update& Authenticator_Response_Update::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response_Update.base);
  return *internal_default_instance();
}


void Authenticator_Response_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response_Update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response.Update)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Authenticator.Response.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MurmurRPC::Authenticator_Response_Status_IsValid(value)) {
            set_status(static_cast< ::MurmurRPC::Authenticator_Response_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response.Update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response.Update)
  return false;
#undef DO_
}

void Authenticator_Response_Update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response.Update)
}

::google::protobuf::uint8* Authenticator_Response_Update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response.Update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response.Update)
  return target;
}

size_t Authenticator_Response_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response.Update)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .MurmurRPC.Authenticator.Response.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response_Update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response.Update)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response_Update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response_Update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response.Update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response.Update)
    MergeFrom(*source);
  }
}

void Authenticator_Response_Update::MergeFrom(const Authenticator_Response_Update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response.Update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    set_status(from.status());
  }
}

void Authenticator_Response_Update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response_Update::CopyFrom(const Authenticator_Response_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response_Update::IsInitialized() const {
  return true;
}

void Authenticator_Response_Update::Swap(Authenticator_Response_Update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response_Update::InternalSwap(Authenticator_Response_Update* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response_Update::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator_Response::InitAsDefaultInstance() {
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->initialize_ = const_cast< ::MurmurRPC::Authenticator_Response_Initialize*>(
      ::MurmurRPC::Authenticator_Response_Initialize::internal_default_instance());
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->authenticate_ = const_cast< ::MurmurRPC::Authenticator_Response_Authenticate*>(
      ::MurmurRPC::Authenticator_Response_Authenticate::internal_default_instance());
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->find_ = const_cast< ::MurmurRPC::Authenticator_Response_Find*>(
      ::MurmurRPC::Authenticator_Response_Find::internal_default_instance());
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->query_ = const_cast< ::MurmurRPC::Authenticator_Response_Query*>(
      ::MurmurRPC::Authenticator_Response_Query::internal_default_instance());
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->register__ = const_cast< ::MurmurRPC::Authenticator_Response_Register*>(
      ::MurmurRPC::Authenticator_Response_Register::internal_default_instance());
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->deregister_ = const_cast< ::MurmurRPC::Authenticator_Response_Deregister*>(
      ::MurmurRPC::Authenticator_Response_Deregister::internal_default_instance());
  ::MurmurRPC::_Authenticator_Response_default_instance_._instance.get_mutable()->update_ = const_cast< ::MurmurRPC::Authenticator_Response_Update*>(
      ::MurmurRPC::Authenticator_Response_Update::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Authenticator_Response::kInitializeFieldNumber;
const int Authenticator_Response::kAuthenticateFieldNumber;
const int Authenticator_Response::kFindFieldNumber;
const int Authenticator_Response::kQueryFieldNumber;
const int Authenticator_Response::kRegisterFieldNumber;
const int Authenticator_Response::kDeregisterFieldNumber;
const int Authenticator_Response::kUpdateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator_Response::Authenticator_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator.Response)
}
Authenticator_Response::Authenticator_Response(const Authenticator_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_initialize()) {
    initialize_ = new ::MurmurRPC::Authenticator_Response_Initialize(*from.initialize_);
  } else {
    initialize_ = NULL;
  }
  if (from.has_authenticate()) {
    authenticate_ = new ::MurmurRPC::Authenticator_Response_Authenticate(*from.authenticate_);
  } else {
    authenticate_ = NULL;
  }
  if (from.has_find()) {
    find_ = new ::MurmurRPC::Authenticator_Response_Find(*from.find_);
  } else {
    find_ = NULL;
  }
  if (from.has_query()) {
    query_ = new ::MurmurRPC::Authenticator_Response_Query(*from.query_);
  } else {
    query_ = NULL;
  }
  if (from.has_register_()) {
    register__ = new ::MurmurRPC::Authenticator_Response_Register(*from.register__);
  } else {
    register__ = NULL;
  }
  if (from.has_deregister()) {
    deregister_ = new ::MurmurRPC::Authenticator_Response_Deregister(*from.deregister_);
  } else {
    deregister_ = NULL;
  }
  if (from.has_update()) {
    update_ = new ::MurmurRPC::Authenticator_Response_Update(*from.update_);
  } else {
    update_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator.Response)
}

void Authenticator_Response::SharedCtor() {
  ::memset(&initialize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&initialize_)) + sizeof(update_));
}

Authenticator_Response::~Authenticator_Response() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator.Response)
  SharedDtor();
}

void Authenticator_Response::SharedDtor() {
  if (this != internal_default_instance()) delete initialize_;
  if (this != internal_default_instance()) delete authenticate_;
  if (this != internal_default_instance()) delete find_;
  if (this != internal_default_instance()) delete query_;
  if (this != internal_default_instance()) delete register__;
  if (this != internal_default_instance()) delete deregister_;
  if (this != internal_default_instance()) delete update_;
}

void Authenticator_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator_Response::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator_Response& Authenticator_Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator_Response.base);
  return *internal_default_instance();
}


void Authenticator_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(initialize_ != NULL);
      initialize_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(authenticate_ != NULL);
      authenticate_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(find_ != NULL);
      find_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(query_ != NULL);
      query_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(register__ != NULL);
      register__->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(deregister_ != NULL);
      deregister_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(update_ != NULL);
      update_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Authenticator.Response.Initialize initialize = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_initialize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Response.Authenticate authenticate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_authenticate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Response.Find find = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_find()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Response.Query query = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Response.Register register = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Response.Deregister deregister = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_deregister()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.Authenticator.Response.Update update = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator.Response)
  return false;
#undef DO_
}

void Authenticator_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Initialize initialize = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_initialize(), output);
  }

  // optional .MurmurRPC.Authenticator.Response.Authenticate authenticate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_authenticate(), output);
  }

  // optional .MurmurRPC.Authenticator.Response.Find find = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_find(), output);
  }

  // optional .MurmurRPC.Authenticator.Response.Query query = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_query(), output);
  }

  // optional .MurmurRPC.Authenticator.Response.Register register = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_register_(), output);
  }

  // optional .MurmurRPC.Authenticator.Response.Deregister deregister = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_deregister(), output);
  }

  // optional .MurmurRPC.Authenticator.Response.Update update = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_update(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator.Response)
}

::google::protobuf::uint8* Authenticator_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Authenticator.Response.Initialize initialize = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_initialize(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Response.Authenticate authenticate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_authenticate(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Response.Find find = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_find(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Response.Query query = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_query(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Response.Register register = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_register_(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Response.Deregister deregister = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_deregister(), deterministic, target);
  }

  // optional .MurmurRPC.Authenticator.Response.Update update = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_update(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator.Response)
  return target;
}

size_t Authenticator_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .MurmurRPC.Authenticator.Response.Initialize initialize = 1;
    if (has_initialize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *initialize_);
    }

    // optional .MurmurRPC.Authenticator.Response.Authenticate authenticate = 2;
    if (has_authenticate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *authenticate_);
    }

    // optional .MurmurRPC.Authenticator.Response.Find find = 3;
    if (has_find()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *find_);
    }

    // optional .MurmurRPC.Authenticator.Response.Query query = 4;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *query_);
    }

    // optional .MurmurRPC.Authenticator.Response.Register register = 5;
    if (has_register_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *register__);
    }

    // optional .MurmurRPC.Authenticator.Response.Deregister deregister = 6;
    if (has_deregister()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *deregister_);
    }

    // optional .MurmurRPC.Authenticator.Response.Update update = 7;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator.Response)
    MergeFrom(*source);
  }
}

void Authenticator_Response::MergeFrom(const Authenticator_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_initialize()->::MurmurRPC::Authenticator_Response_Initialize::MergeFrom(from.initialize());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_authenticate()->::MurmurRPC::Authenticator_Response_Authenticate::MergeFrom(from.authenticate());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_find()->::MurmurRPC::Authenticator_Response_Find::MergeFrom(from.find());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_query()->::MurmurRPC::Authenticator_Response_Query::MergeFrom(from.query());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_register_()->::MurmurRPC::Authenticator_Response_Register::MergeFrom(from.register_());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_deregister()->::MurmurRPC::Authenticator_Response_Deregister::MergeFrom(from.deregister());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_update()->::MurmurRPC::Authenticator_Response_Update::MergeFrom(from.update());
    }
  }
}

void Authenticator_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator_Response::CopyFrom(const Authenticator_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator_Response::IsInitialized() const {
  if (has_initialize()) {
    if (!this->initialize_->IsInitialized()) return false;
  }
  if (has_authenticate()) {
    if (!this->authenticate_->IsInitialized()) return false;
  }
  if (has_find()) {
    if (!this->find_->IsInitialized()) return false;
  }
  if (has_query()) {
    if (!this->query_->IsInitialized()) return false;
  }
  if (has_register_()) {
    if (!this->register__->IsInitialized()) return false;
  }
  return true;
}

void Authenticator_Response::Swap(Authenticator_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator_Response::InternalSwap(Authenticator_Response* other) {
  using std::swap;
  swap(initialize_, other->initialize_);
  swap(authenticate_, other->authenticate_);
  swap(find_, other->find_);
  swap(query_, other->query_);
  swap(register__, other->register__);
  swap(deregister_, other->deregister_);
  swap(update_, other->update_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator_Response::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Authenticator::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Authenticator::Authenticator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_Authenticator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.Authenticator)
}
Authenticator::Authenticator(const Authenticator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.Authenticator)
}

void Authenticator::SharedCtor() {
}

Authenticator::~Authenticator() {
  // @@protoc_insertion_point(destructor:MurmurRPC.Authenticator)
  SharedDtor();
}

void Authenticator::SharedDtor() {
}

void Authenticator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Authenticator::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Authenticator& Authenticator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_Authenticator.base);
  return *internal_default_instance();
}


void Authenticator::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.Authenticator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Authenticator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.Authenticator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.Authenticator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.Authenticator)
  return false;
#undef DO_
}

void Authenticator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.Authenticator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.Authenticator)
}

::google::protobuf::uint8* Authenticator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.Authenticator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.Authenticator)
  return target;
}

size_t Authenticator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.Authenticator)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Authenticator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.Authenticator)
  GOOGLE_DCHECK_NE(&from, this);
  const Authenticator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Authenticator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.Authenticator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.Authenticator)
    MergeFrom(*source);
  }
}

void Authenticator::MergeFrom(const Authenticator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.Authenticator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Authenticator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.Authenticator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authenticator::CopyFrom(const Authenticator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.Authenticator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authenticator::IsInitialized() const {
  return true;
}

void Authenticator::Swap(Authenticator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Authenticator::InternalSwap(Authenticator* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Authenticator::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatabaseUser_Query::InitAsDefaultInstance() {
  ::MurmurRPC::_DatabaseUser_Query_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseUser_Query::kServerFieldNumber;
const int DatabaseUser_Query::kFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseUser_Query::DatabaseUser_Query()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser_Query.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.DatabaseUser.Query)
}
DatabaseUser_Query::DatabaseUser_Query(const DatabaseUser_Query& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filter()) {
    filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.DatabaseUser.Query)
}

void DatabaseUser_Query::SharedCtor() {
  filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ = NULL;
}

DatabaseUser_Query::~DatabaseUser_Query() {
  // @@protoc_insertion_point(destructor:MurmurRPC.DatabaseUser.Query)
  SharedDtor();
}

void DatabaseUser_Query::SharedDtor() {
  filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void DatabaseUser_Query::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DatabaseUser_Query::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabaseUser_Query& DatabaseUser_Query::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser_Query.base);
  return *internal_default_instance();
}


void DatabaseUser_Query::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.DatabaseUser.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      filter_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseUser_Query::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.DatabaseUser.Query)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filter = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filter().data(), static_cast<int>(this->filter().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.Query.filter");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.DatabaseUser.Query)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.DatabaseUser.Query)
  return false;
#undef DO_
}

void DatabaseUser_Query::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.DatabaseUser.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional string filter = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.Query.filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.DatabaseUser.Query)
}

::google::protobuf::uint8* DatabaseUser_Query::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.DatabaseUser.Query)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional string filter = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filter().data(), static_cast<int>(this->filter().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.Query.filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.DatabaseUser.Query)
  return target;
}

size_t DatabaseUser_Query::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.DatabaseUser.Query)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string filter = 2;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseUser_Query::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.DatabaseUser.Query)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseUser_Query* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseUser_Query>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.DatabaseUser.Query)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.DatabaseUser.Query)
    MergeFrom(*source);
  }
}

void DatabaseUser_Query::MergeFrom(const DatabaseUser_Query& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.DatabaseUser.Query)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_filter();
      filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filter_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
  }
}

void DatabaseUser_Query::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.DatabaseUser.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseUser_Query::CopyFrom(const DatabaseUser_Query& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.DatabaseUser.Query)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseUser_Query::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void DatabaseUser_Query::Swap(DatabaseUser_Query* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseUser_Query::InternalSwap(DatabaseUser_Query* other) {
  using std::swap;
  filter_.Swap(&other->filter_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DatabaseUser_Query::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatabaseUser_List::InitAsDefaultInstance() {
  ::MurmurRPC::_DatabaseUser_List_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseUser_List::kServerFieldNumber;
const int DatabaseUser_List::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseUser_List::DatabaseUser_List()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser_List.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.DatabaseUser.List)
}
DatabaseUser_List::DatabaseUser_List(const DatabaseUser_List& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.DatabaseUser.List)
}

void DatabaseUser_List::SharedCtor() {
  server_ = NULL;
}

DatabaseUser_List::~DatabaseUser_List() {
  // @@protoc_insertion_point(destructor:MurmurRPC.DatabaseUser.List)
  SharedDtor();
}

void DatabaseUser_List::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
}

void DatabaseUser_List::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DatabaseUser_List::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabaseUser_List& DatabaseUser_List::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser_List.base);
  return *internal_default_instance();
}


void DatabaseUser_List::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.DatabaseUser.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(server_ != NULL);
    server_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseUser_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.DatabaseUser.List)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MurmurRPC.DatabaseUser users = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.DatabaseUser.List)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.DatabaseUser.List)
  return false;
#undef DO_
}

void DatabaseUser_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.DatabaseUser.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // repeated .MurmurRPC.DatabaseUser users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->users(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.DatabaseUser.List)
}

::google::protobuf::uint8* DatabaseUser_List::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.DatabaseUser.List)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // repeated .MurmurRPC.DatabaseUser users = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->users_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->users(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.DatabaseUser.List)
  return target;
}

size_t DatabaseUser_List::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.DatabaseUser.List)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MurmurRPC.DatabaseUser users = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->users_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->users(static_cast<int>(i)));
    }
  }

  // optional .MurmurRPC.Server server = 1;
  if (has_server()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *server_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseUser_List::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.DatabaseUser.List)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseUser_List* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseUser_List>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.DatabaseUser.List)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.DatabaseUser.List)
    MergeFrom(*source);
  }
}

void DatabaseUser_List::MergeFrom(const DatabaseUser_List& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.DatabaseUser.List)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_server()) {
    mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
  }
}

void DatabaseUser_List::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.DatabaseUser.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseUser_List::CopyFrom(const DatabaseUser_List& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.DatabaseUser.List)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseUser_List::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void DatabaseUser_List::Swap(DatabaseUser_List* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseUser_List::InternalSwap(DatabaseUser_List* other) {
  using std::swap;
  CastToBase(&users_)->InternalSwap(CastToBase(&other->users_));
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DatabaseUser_List::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatabaseUser_Verify::InitAsDefaultInstance() {
  ::MurmurRPC::_DatabaseUser_Verify_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseUser_Verify::kServerFieldNumber;
const int DatabaseUser_Verify::kNameFieldNumber;
const int DatabaseUser_Verify::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseUser_Verify::DatabaseUser_Verify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser_Verify.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.DatabaseUser.Verify)
}
DatabaseUser_Verify::DatabaseUser_Verify(const DatabaseUser_Verify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.DatabaseUser.Verify)
}

void DatabaseUser_Verify::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ = NULL;
}

DatabaseUser_Verify::~DatabaseUser_Verify() {
  // @@protoc_insertion_point(destructor:MurmurRPC.DatabaseUser.Verify)
  SharedDtor();
}

void DatabaseUser_Verify::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void DatabaseUser_Verify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DatabaseUser_Verify::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabaseUser_Verify& DatabaseUser_Verify::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser_Verify.base);
  return *internal_default_instance();
}


void DatabaseUser_Verify::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.DatabaseUser.Verify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseUser_Verify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.DatabaseUser.Verify)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.Verify.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.Verify.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.DatabaseUser.Verify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.DatabaseUser.Verify)
  return false;
#undef DO_
}

void DatabaseUser_Verify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.DatabaseUser.Verify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.Verify.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.Verify.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.DatabaseUser.Verify)
}

::google::protobuf::uint8* DatabaseUser_Verify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.DatabaseUser.Verify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.Verify.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string password = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.Verify.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.DatabaseUser.Verify)
  return target;
}

size_t DatabaseUser_Verify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.DatabaseUser.Verify)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseUser_Verify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.DatabaseUser.Verify)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseUser_Verify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseUser_Verify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.DatabaseUser.Verify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.DatabaseUser.Verify)
    MergeFrom(*source);
  }
}

void DatabaseUser_Verify::MergeFrom(const DatabaseUser_Verify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.DatabaseUser.Verify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
  }
}

void DatabaseUser_Verify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.DatabaseUser.Verify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseUser_Verify::CopyFrom(const DatabaseUser_Verify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.DatabaseUser.Verify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseUser_Verify::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void DatabaseUser_Verify::Swap(DatabaseUser_Verify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseUser_Verify::InternalSwap(DatabaseUser_Verify* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DatabaseUser_Verify::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DatabaseUser::InitAsDefaultInstance() {
  ::MurmurRPC::_DatabaseUser_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatabaseUser::kServerFieldNumber;
const int DatabaseUser::kIdFieldNumber;
const int DatabaseUser::kNameFieldNumber;
const int DatabaseUser::kEmailFieldNumber;
const int DatabaseUser::kCommentFieldNumber;
const int DatabaseUser::kHashFieldNumber;
const int DatabaseUser::kPasswordFieldNumber;
const int DatabaseUser::kLastActiveFieldNumber;
const int DatabaseUser::kTextureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatabaseUser::DatabaseUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.DatabaseUser)
}
DatabaseUser::DatabaseUser(const DatabaseUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email()) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_comment()) {
    comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  last_active_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_active()) {
    last_active_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_active_);
  }
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_texture()) {
    texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
  }
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.DatabaseUser)
}

void DatabaseUser::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_active_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&server_)) + sizeof(id_));
}

DatabaseUser::~DatabaseUser() {
  // @@protoc_insertion_point(destructor:MurmurRPC.DatabaseUser)
  SharedDtor();
}

void DatabaseUser::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_active_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  texture_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete server_;
}

void DatabaseUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DatabaseUser::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DatabaseUser& DatabaseUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_DatabaseUser.base);
  return *internal_default_instance();
}


void DatabaseUser::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.DatabaseUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      email_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      comment_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      hash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      password_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      last_active_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      texture_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatabaseUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.DatabaseUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.email");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string comment = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), static_cast<int>(this->comment().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.comment");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hash = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string password = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_active()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_active().data(), static_cast<int>(this->last_active().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MurmurRPC.DatabaseUser.last_active");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes texture = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_texture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.DatabaseUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.DatabaseUser)
  return false;
#undef DO_
}

void DatabaseUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.DatabaseUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string email = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->email(), output);
  }

  // optional string comment = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->comment(), output);
  }

  // optional string hash = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hash(), output);
  }

  // optional string password = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->password(), output);
  }

  // optional string last_active = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_active().data(), static_cast<int>(this->last_active().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.last_active");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->last_active(), output);
  }

  // optional bytes texture = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->texture(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.DatabaseUser)
}

::google::protobuf::uint8* DatabaseUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.DatabaseUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional uint32 id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string email = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }

  // optional string comment = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), static_cast<int>(this->comment().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }

  // optional string hash = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hash(), target);
  }

  // optional string password = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  // optional string last_active = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_active().data(), static_cast<int>(this->last_active().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MurmurRPC.DatabaseUser.last_active");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->last_active(), target);
  }

  // optional bytes texture = 9;
  if (cached_has_bits & 0x00000040u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->texture(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.DatabaseUser)
  return target;
}

size_t DatabaseUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.DatabaseUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

    // optional string hash = 6;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string password = 7;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string last_active = 8;
    if (has_last_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_active());
    }

    // optional bytes texture = 9;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->texture());
    }

    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

  }
  // optional uint32 id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatabaseUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.DatabaseUser)
  GOOGLE_DCHECK_NE(&from, this);
  const DatabaseUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatabaseUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.DatabaseUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.DatabaseUser)
    MergeFrom(*source);
  }
}

void DatabaseUser::MergeFrom(const DatabaseUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.DatabaseUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_comment();
      comment_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.comment_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_last_active();
      last_active_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_active_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_texture();
      texture_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.texture_);
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    set_id(from.id());
  }
}

void DatabaseUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.DatabaseUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatabaseUser::CopyFrom(const DatabaseUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.DatabaseUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatabaseUser::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  return true;
}

void DatabaseUser::Swap(DatabaseUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatabaseUser::InternalSwap(DatabaseUser* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  email_.Swap(&other->email_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  comment_.Swap(&other->comment_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_active_.Swap(&other->last_active_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  texture_.Swap(&other->texture_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_, other->server_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DatabaseUser::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RedirectWhisperGroup::InitAsDefaultInstance() {
  ::MurmurRPC::_RedirectWhisperGroup_default_instance_._instance.get_mutable()->server_ = const_cast< ::MurmurRPC::Server*>(
      ::MurmurRPC::Server::internal_default_instance());
  ::MurmurRPC::_RedirectWhisperGroup_default_instance_._instance.get_mutable()->user_ = const_cast< ::MurmurRPC::User*>(
      ::MurmurRPC::User::internal_default_instance());
  ::MurmurRPC::_RedirectWhisperGroup_default_instance_._instance.get_mutable()->source_ = const_cast< ::MurmurRPC::ACL_Group*>(
      ::MurmurRPC::ACL_Group::internal_default_instance());
  ::MurmurRPC::_RedirectWhisperGroup_default_instance_._instance.get_mutable()->target_ = const_cast< ::MurmurRPC::ACL_Group*>(
      ::MurmurRPC::ACL_Group::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedirectWhisperGroup::kServerFieldNumber;
const int RedirectWhisperGroup::kUserFieldNumber;
const int RedirectWhisperGroup::kSourceFieldNumber;
const int RedirectWhisperGroup::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedirectWhisperGroup::RedirectWhisperGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MurmurRPC_2eproto::scc_info_RedirectWhisperGroup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MurmurRPC.RedirectWhisperGroup)
}
RedirectWhisperGroup::RedirectWhisperGroup(const RedirectWhisperGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_server()) {
    server_ = new ::MurmurRPC::Server(*from.server_);
  } else {
    server_ = NULL;
  }
  if (from.has_user()) {
    user_ = new ::MurmurRPC::User(*from.user_);
  } else {
    user_ = NULL;
  }
  if (from.has_source()) {
    source_ = new ::MurmurRPC::ACL_Group(*from.source_);
  } else {
    source_ = NULL;
  }
  if (from.has_target()) {
    target_ = new ::MurmurRPC::ACL_Group(*from.target_);
  } else {
    target_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MurmurRPC.RedirectWhisperGroup)
}

void RedirectWhisperGroup::SharedCtor() {
  ::memset(&server_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_) -
      reinterpret_cast<char*>(&server_)) + sizeof(target_));
}

RedirectWhisperGroup::~RedirectWhisperGroup() {
  // @@protoc_insertion_point(destructor:MurmurRPC.RedirectWhisperGroup)
  SharedDtor();
}

void RedirectWhisperGroup::SharedDtor() {
  if (this != internal_default_instance()) delete server_;
  if (this != internal_default_instance()) delete user_;
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete target_;
}

void RedirectWhisperGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RedirectWhisperGroup::descriptor() {
  ::protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RedirectWhisperGroup& RedirectWhisperGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MurmurRPC_2eproto::scc_info_RedirectWhisperGroup.base);
  return *internal_default_instance();
}


void RedirectWhisperGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:MurmurRPC.RedirectWhisperGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(server_ != NULL);
      server_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(user_ != NULL);
      user_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(source_ != NULL);
      source_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(target_ != NULL);
      target_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RedirectWhisperGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MurmurRPC.RedirectWhisperGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MurmurRPC.Server server = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.User user = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.ACL.Group source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MurmurRPC.ACL.Group target = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MurmurRPC.RedirectWhisperGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MurmurRPC.RedirectWhisperGroup)
  return false;
#undef DO_
}

void RedirectWhisperGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MurmurRPC.RedirectWhisperGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_server(), output);
  }

  // optional .MurmurRPC.User user = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_user(), output);
  }

  // optional .MurmurRPC.ACL.Group source = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_source(), output);
  }

  // optional .MurmurRPC.ACL.Group target = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MurmurRPC.RedirectWhisperGroup)
}

::google::protobuf::uint8* RedirectWhisperGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MurmurRPC.RedirectWhisperGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MurmurRPC.Server server = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_server(), deterministic, target);
  }

  // optional .MurmurRPC.User user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_user(), deterministic, target);
  }

  // optional .MurmurRPC.ACL.Group source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_source(), deterministic, target);
  }

  // optional .MurmurRPC.ACL.Group target = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_target(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MurmurRPC.RedirectWhisperGroup)
  return target;
}

size_t RedirectWhisperGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MurmurRPC.RedirectWhisperGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .MurmurRPC.Server server = 1;
    if (has_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *server_);
    }

    // optional .MurmurRPC.User user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *user_);
    }

    // optional .MurmurRPC.ACL.Group source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *source_);
    }

    // optional .MurmurRPC.ACL.Group target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectWhisperGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MurmurRPC.RedirectWhisperGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const RedirectWhisperGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedirectWhisperGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MurmurRPC.RedirectWhisperGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MurmurRPC.RedirectWhisperGroup)
    MergeFrom(*source);
  }
}

void RedirectWhisperGroup::MergeFrom(const RedirectWhisperGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MurmurRPC.RedirectWhisperGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_server()->::MurmurRPC::Server::MergeFrom(from.server());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_user()->::MurmurRPC::User::MergeFrom(from.user());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_source()->::MurmurRPC::ACL_Group::MergeFrom(from.source());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_target()->::MurmurRPC::ACL_Group::MergeFrom(from.target());
    }
  }
}

void RedirectWhisperGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MurmurRPC.RedirectWhisperGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedirectWhisperGroup::CopyFrom(const RedirectWhisperGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MurmurRPC.RedirectWhisperGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectWhisperGroup::IsInitialized() const {
  if (has_server()) {
    if (!this->server_->IsInitialized()) return false;
  }
  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_source()) {
    if (!this->source_->IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target_->IsInitialized()) return false;
  }
  return true;
}

void RedirectWhisperGroup::Swap(RedirectWhisperGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedirectWhisperGroup::InternalSwap(RedirectWhisperGroup* other) {
  using std::swap;
  swap(server_, other->server_);
  swap(user_, other->user_);
  swap(source_, other->source_);
  swap(target_, other->target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RedirectWhisperGroup::GetMetadata() const {
  protobuf_MurmurRPC_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MurmurRPC_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MurmurRPC
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Void* Arena::CreateMaybeMessage< ::MurmurRPC::Void >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Void >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Version* Arena::CreateMaybeMessage< ::MurmurRPC::Version >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Version >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Uptime* Arena::CreateMaybeMessage< ::MurmurRPC::Uptime >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Uptime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Server_Event* Arena::CreateMaybeMessage< ::MurmurRPC::Server_Event >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Server_Event >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Server_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Server_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Server_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Server_List* Arena::CreateMaybeMessage< ::MurmurRPC::Server_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Server_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Server* Arena::CreateMaybeMessage< ::MurmurRPC::Server >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Server >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Event* Arena::CreateMaybeMessage< ::MurmurRPC::Event >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Event >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::ContextAction* Arena::CreateMaybeMessage< ::MurmurRPC::ContextAction >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::ContextAction >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::TextMessage_Filter* Arena::CreateMaybeMessage< ::MurmurRPC::TextMessage_Filter >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::TextMessage_Filter >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::TextMessage* Arena::CreateMaybeMessage< ::MurmurRPC::TextMessage >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::TextMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Log_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Log_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Log_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Log_List* Arena::CreateMaybeMessage< ::MurmurRPC::Log_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Log_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Log* Arena::CreateMaybeMessage< ::MurmurRPC::Log >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Log >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Config_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::MurmurRPC::Config_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Config_FieldsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Config_Field* Arena::CreateMaybeMessage< ::MurmurRPC::Config_Field >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Config_Field >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Config* Arena::CreateMaybeMessage< ::MurmurRPC::Config >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Config >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Channel_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Channel_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Channel_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Channel_List* Arena::CreateMaybeMessage< ::MurmurRPC::Channel_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Channel_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Channel* Arena::CreateMaybeMessage< ::MurmurRPC::Channel >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Channel >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::User_Query* Arena::CreateMaybeMessage< ::MurmurRPC::User_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::User_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::User_List* Arena::CreateMaybeMessage< ::MurmurRPC::User_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::User_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::User_Kick* Arena::CreateMaybeMessage< ::MurmurRPC::User_Kick >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::User_Kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::User* Arena::CreateMaybeMessage< ::MurmurRPC::User >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::User >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Tree_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Tree_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Tree_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Tree* Arena::CreateMaybeMessage< ::MurmurRPC::Tree >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Tree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Ban_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Ban_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Ban_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Ban_List* Arena::CreateMaybeMessage< ::MurmurRPC::Ban_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Ban_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Ban* Arena::CreateMaybeMessage< ::MurmurRPC::Ban >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Ban >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::ACL_Group* Arena::CreateMaybeMessage< ::MurmurRPC::ACL_Group >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::ACL_Group >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::ACL_Query* Arena::CreateMaybeMessage< ::MurmurRPC::ACL_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::ACL_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::ACL_List* Arena::CreateMaybeMessage< ::MurmurRPC::ACL_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::ACL_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::ACL_TemporaryGroup* Arena::CreateMaybeMessage< ::MurmurRPC::ACL_TemporaryGroup >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::ACL_TemporaryGroup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::ACL* Arena::CreateMaybeMessage< ::MurmurRPC::ACL >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::ACL >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request_Authenticate* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request_Authenticate >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request_Authenticate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request_Find* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request_Find >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request_Find >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request_Register* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request_Register >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request_Register >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request_Deregister* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request_Deregister >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request_Deregister >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request_Update* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request_Update >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request_Update >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Request* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Request >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Request >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Initialize* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Initialize >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Initialize >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Authenticate* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Authenticate >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Authenticate >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Find* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Find >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Find >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Query* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Register* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Register >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Register >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Deregister* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Deregister >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Deregister >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response_Update* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response_Update >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response_Update >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator_Response* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator_Response >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator_Response >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::Authenticator* Arena::CreateMaybeMessage< ::MurmurRPC::Authenticator >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::Authenticator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::DatabaseUser_Query* Arena::CreateMaybeMessage< ::MurmurRPC::DatabaseUser_Query >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::DatabaseUser_Query >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::DatabaseUser_List* Arena::CreateMaybeMessage< ::MurmurRPC::DatabaseUser_List >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::DatabaseUser_List >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::DatabaseUser_Verify* Arena::CreateMaybeMessage< ::MurmurRPC::DatabaseUser_Verify >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::DatabaseUser_Verify >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::DatabaseUser* Arena::CreateMaybeMessage< ::MurmurRPC::DatabaseUser >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::DatabaseUser >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MurmurRPC::RedirectWhisperGroup* Arena::CreateMaybeMessage< ::MurmurRPC::RedirectWhisperGroup >(Arena* arena) {
  return Arena::CreateInternal< ::MurmurRPC::RedirectWhisperGroup >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
