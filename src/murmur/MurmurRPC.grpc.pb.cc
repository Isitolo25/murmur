// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MurmurRPC.proto

#include "MurmurRPC.pb.h"
#include "MurmurRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace MurmurRPC {

static const char* V1_method_names[] = {
  "/MurmurRPC.V1/GetUptime",
  "/MurmurRPC.V1/GetVersion",
  "/MurmurRPC.V1/Events",
  "/MurmurRPC.V1/ServerCreate",
  "/MurmurRPC.V1/ServerQuery",
  "/MurmurRPC.V1/ServerGet",
  "/MurmurRPC.V1/ServerStart",
  "/MurmurRPC.V1/ServerStop",
  "/MurmurRPC.V1/ServerRemove",
  "/MurmurRPC.V1/ServerEvents",
  "/MurmurRPC.V1/ContextActionAdd",
  "/MurmurRPC.V1/ContextActionRemove",
  "/MurmurRPC.V1/ContextActionEvents",
  "/MurmurRPC.V1/TextMessageSend",
  "/MurmurRPC.V1/TextMessageFilter",
  "/MurmurRPC.V1/LogQuery",
  "/MurmurRPC.V1/ConfigGet",
  "/MurmurRPC.V1/ConfigGetField",
  "/MurmurRPC.V1/ConfigSetField",
  "/MurmurRPC.V1/ConfigGetDefault",
  "/MurmurRPC.V1/ChannelQuery",
  "/MurmurRPC.V1/ChannelGet",
  "/MurmurRPC.V1/ChannelAdd",
  "/MurmurRPC.V1/ChannelRemove",
  "/MurmurRPC.V1/ChannelUpdate",
  "/MurmurRPC.V1/UserQuery",
  "/MurmurRPC.V1/UserGet",
  "/MurmurRPC.V1/UserUpdate",
  "/MurmurRPC.V1/UserKick",
  "/MurmurRPC.V1/TreeQuery",
  "/MurmurRPC.V1/BansGet",
  "/MurmurRPC.V1/BansSet",
  "/MurmurRPC.V1/ACLGet",
  "/MurmurRPC.V1/ACLSet",
  "/MurmurRPC.V1/ACLGetEffectivePermissions",
  "/MurmurRPC.V1/ACLAddTemporaryGroup",
  "/MurmurRPC.V1/ACLRemoveTemporaryGroup",
  "/MurmurRPC.V1/AuthenticatorStream",
  "/MurmurRPC.V1/DatabaseUserQuery",
  "/MurmurRPC.V1/DatabaseUserGet",
  "/MurmurRPC.V1/DatabaseUserUpdate",
  "/MurmurRPC.V1/DatabaseUserRegister",
  "/MurmurRPC.V1/DatabaseUserDeregister",
  "/MurmurRPC.V1/DatabaseUserVerify",
  "/MurmurRPC.V1/RedirectWhisperGroupAdd",
  "/MurmurRPC.V1/RedirectWhisperGroupRemove",
};

std::unique_ptr< V1::Stub> V1::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< V1::Stub> stub(new V1::Stub(channel));
  return stub;
}

V1::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetUptime_(V1_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetVersion_(V1_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Events_(V1_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ServerCreate_(V1_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerQuery_(V1_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerGet_(V1_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerStart_(V1_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerStop_(V1_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerRemove_(V1_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerEvents_(V1_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ContextActionAdd_(V1_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContextActionRemove_(V1_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContextActionEvents_(V1_method_names[12], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TextMessageSend_(V1_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TextMessageFilter_(V1_method_names[14], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_LogQuery_(V1_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigGet_(V1_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigGetField_(V1_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigSetField_(V1_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConfigGetDefault_(V1_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelQuery_(V1_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelGet_(V1_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelAdd_(V1_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelRemove_(V1_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelUpdate_(V1_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserQuery_(V1_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserGet_(V1_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserUpdate_(V1_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserKick_(V1_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TreeQuery_(V1_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BansGet_(V1_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BansSet_(V1_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ACLGet_(V1_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ACLSet_(V1_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ACLGetEffectivePermissions_(V1_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ACLAddTemporaryGroup_(V1_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ACLRemoveTemporaryGroup_(V1_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticatorStream_(V1_method_names[37], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DatabaseUserQuery_(V1_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DatabaseUserGet_(V1_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DatabaseUserUpdate_(V1_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DatabaseUserRegister_(V1_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DatabaseUserDeregister_(V1_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DatabaseUserVerify_(V1_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RedirectWhisperGroupAdd_(V1_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RedirectWhisperGroupRemove_(V1_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status V1::Stub::GetUptime(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::MurmurRPC::Uptime* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUptime_, context, request, response);
}

void V1::Stub::experimental_async::GetUptime(::grpc::ClientContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Uptime* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUptime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Uptime>* V1::Stub::AsyncGetUptimeRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Uptime>::Create(channel_.get(), cq, rpcmethod_GetUptime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Uptime>* V1::Stub::PrepareAsyncGetUptimeRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Uptime>::Create(channel_.get(), cq, rpcmethod_GetUptime_, context, request, false);
}

::grpc::Status V1::Stub::GetVersion(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::MurmurRPC::Version* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVersion_, context, request, response);
}

void V1::Stub::experimental_async::GetVersion(::grpc::ClientContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Version* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVersion_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Version>* V1::Stub::AsyncGetVersionRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Version>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Version>* V1::Stub::PrepareAsyncGetVersionRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Version>::Create(channel_.get(), cq, rpcmethod_GetVersion_, context, request, false);
}

::grpc::ClientReader< ::MurmurRPC::Event>* V1::Stub::EventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request) {
  return ::grpc::internal::ClientReaderFactory< ::MurmurRPC::Event>::Create(channel_.get(), rpcmethod_Events_, context, request);
}

::grpc::ClientAsyncReader< ::MurmurRPC::Event>* V1::Stub::AsyncEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MurmurRPC::Event>::Create(channel_.get(), cq, rpcmethod_Events_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MurmurRPC::Event>* V1::Stub::PrepareAsyncEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MurmurRPC::Event>::Create(channel_.get(), cq, rpcmethod_Events_, context, request, false, nullptr);
}

::grpc::Status V1::Stub::ServerCreate(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::MurmurRPC::Server* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerCreate_, context, request, response);
}

void V1::Stub::experimental_async::ServerCreate(::grpc::ClientContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Server* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerCreate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Server>* V1::Stub::AsyncServerCreateRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Server>::Create(channel_.get(), cq, rpcmethod_ServerCreate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Server>* V1::Stub::PrepareAsyncServerCreateRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Server>::Create(channel_.get(), cq, rpcmethod_ServerCreate_, context, request, false);
}

::grpc::Status V1::Stub::ServerQuery(::grpc::ClientContext* context, const ::MurmurRPC::Server_Query& request, ::MurmurRPC::Server_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerQuery_, context, request, response);
}

void V1::Stub::experimental_async::ServerQuery(::grpc::ClientContext* context, const ::MurmurRPC::Server_Query* request, ::MurmurRPC::Server_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerQuery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Server_List>* V1::Stub::AsyncServerQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Server_List>::Create(channel_.get(), cq, rpcmethod_ServerQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Server_List>* V1::Stub::PrepareAsyncServerQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Server_List>::Create(channel_.get(), cq, rpcmethod_ServerQuery_, context, request, false);
}

::grpc::Status V1::Stub::ServerGet(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::MurmurRPC::Server* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerGet_, context, request, response);
}

void V1::Stub::experimental_async::ServerGet(::grpc::ClientContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Server* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Server>* V1::Stub::AsyncServerGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Server>::Create(channel_.get(), cq, rpcmethod_ServerGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Server>* V1::Stub::PrepareAsyncServerGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Server>::Create(channel_.get(), cq, rpcmethod_ServerGet_, context, request, false);
}

::grpc::Status V1::Stub::ServerStart(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerStart_, context, request, response);
}

void V1::Stub::experimental_async::ServerStart(::grpc::ClientContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerStart_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncServerStartRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ServerStart_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncServerStartRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ServerStart_, context, request, false);
}

::grpc::Status V1::Stub::ServerStop(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerStop_, context, request, response);
}

void V1::Stub::experimental_async::ServerStop(::grpc::ClientContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerStop_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncServerStopRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ServerStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncServerStopRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ServerStop_, context, request, false);
}

::grpc::Status V1::Stub::ServerRemove(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServerRemove_, context, request, response);
}

void V1::Stub::experimental_async::ServerRemove(::grpc::ClientContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServerRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncServerRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ServerRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncServerRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ServerRemove_, context, request, false);
}

::grpc::ClientReader< ::MurmurRPC::Server_Event>* V1::Stub::ServerEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request) {
  return ::grpc::internal::ClientReaderFactory< ::MurmurRPC::Server_Event>::Create(channel_.get(), rpcmethod_ServerEvents_, context, request);
}

::grpc::ClientAsyncReader< ::MurmurRPC::Server_Event>* V1::Stub::AsyncServerEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MurmurRPC::Server_Event>::Create(channel_.get(), cq, rpcmethod_ServerEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MurmurRPC::Server_Event>* V1::Stub::PrepareAsyncServerEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MurmurRPC::Server_Event>::Create(channel_.get(), cq, rpcmethod_ServerEvents_, context, request, false, nullptr);
}

::grpc::Status V1::Stub::ContextActionAdd(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ContextActionAdd_, context, request, response);
}

void V1::Stub::experimental_async::ContextActionAdd(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ContextActionAdd_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncContextActionAddRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ContextActionAdd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncContextActionAddRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ContextActionAdd_, context, request, false);
}

::grpc::Status V1::Stub::ContextActionRemove(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ContextActionRemove_, context, request, response);
}

void V1::Stub::experimental_async::ContextActionRemove(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ContextActionRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncContextActionRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ContextActionRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncContextActionRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ContextActionRemove_, context, request, false);
}

::grpc::ClientReader< ::MurmurRPC::ContextAction>* V1::Stub::ContextActionEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request) {
  return ::grpc::internal::ClientReaderFactory< ::MurmurRPC::ContextAction>::Create(channel_.get(), rpcmethod_ContextActionEvents_, context, request);
}

::grpc::ClientAsyncReader< ::MurmurRPC::ContextAction>* V1::Stub::AsyncContextActionEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MurmurRPC::ContextAction>::Create(channel_.get(), cq, rpcmethod_ContextActionEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MurmurRPC::ContextAction>* V1::Stub::PrepareAsyncContextActionEventsRaw(::grpc::ClientContext* context, const ::MurmurRPC::ContextAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MurmurRPC::ContextAction>::Create(channel_.get(), cq, rpcmethod_ContextActionEvents_, context, request, false, nullptr);
}

::grpc::Status V1::Stub::TextMessageSend(::grpc::ClientContext* context, const ::MurmurRPC::TextMessage& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TextMessageSend_, context, request, response);
}

void V1::Stub::experimental_async::TextMessageSend(::grpc::ClientContext* context, const ::MurmurRPC::TextMessage* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TextMessageSend_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncTextMessageSendRaw(::grpc::ClientContext* context, const ::MurmurRPC::TextMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_TextMessageSend_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncTextMessageSendRaw(::grpc::ClientContext* context, const ::MurmurRPC::TextMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_TextMessageSend_, context, request, false);
}

::grpc::ClientReaderWriter< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>* V1::Stub::TextMessageFilterRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>::Create(channel_.get(), rpcmethod_TextMessageFilter_, context);
}

::grpc::ClientAsyncReaderWriter< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>* V1::Stub::AsyncTextMessageFilterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>::Create(channel_.get(), cq, rpcmethod_TextMessageFilter_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>* V1::Stub::PrepareAsyncTextMessageFilterRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>::Create(channel_.get(), cq, rpcmethod_TextMessageFilter_, context, false, nullptr);
}

::grpc::Status V1::Stub::LogQuery(::grpc::ClientContext* context, const ::MurmurRPC::Log_Query& request, ::MurmurRPC::Log_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LogQuery_, context, request, response);
}

void V1::Stub::experimental_async::LogQuery(::grpc::ClientContext* context, const ::MurmurRPC::Log_Query* request, ::MurmurRPC::Log_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LogQuery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Log_List>* V1::Stub::AsyncLogQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Log_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Log_List>::Create(channel_.get(), cq, rpcmethod_LogQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Log_List>* V1::Stub::PrepareAsyncLogQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Log_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Log_List>::Create(channel_.get(), cq, rpcmethod_LogQuery_, context, request, false);
}

::grpc::Status V1::Stub::ConfigGet(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::MurmurRPC::Config* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConfigGet_, context, request, response);
}

void V1::Stub::experimental_async::ConfigGet(::grpc::ClientContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Config* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConfigGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Config>* V1::Stub::AsyncConfigGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Config>::Create(channel_.get(), cq, rpcmethod_ConfigGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Config>* V1::Stub::PrepareAsyncConfigGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Server& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Config>::Create(channel_.get(), cq, rpcmethod_ConfigGet_, context, request, false);
}

::grpc::Status V1::Stub::ConfigGetField(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field& request, ::MurmurRPC::Config_Field* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConfigGetField_, context, request, response);
}

void V1::Stub::experimental_async::ConfigGetField(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field* request, ::MurmurRPC::Config_Field* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConfigGetField_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Config_Field>* V1::Stub::AsyncConfigGetFieldRaw(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Config_Field>::Create(channel_.get(), cq, rpcmethod_ConfigGetField_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Config_Field>* V1::Stub::PrepareAsyncConfigGetFieldRaw(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Config_Field>::Create(channel_.get(), cq, rpcmethod_ConfigGetField_, context, request, false);
}

::grpc::Status V1::Stub::ConfigSetField(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConfigSetField_, context, request, response);
}

void V1::Stub::experimental_async::ConfigSetField(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConfigSetField_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncConfigSetFieldRaw(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ConfigSetField_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncConfigSetFieldRaw(::grpc::ClientContext* context, const ::MurmurRPC::Config_Field& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ConfigSetField_, context, request, false);
}

::grpc::Status V1::Stub::ConfigGetDefault(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::MurmurRPC::Config* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConfigGetDefault_, context, request, response);
}

void V1::Stub::experimental_async::ConfigGetDefault(::grpc::ClientContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Config* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConfigGetDefault_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Config>* V1::Stub::AsyncConfigGetDefaultRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Config>::Create(channel_.get(), cq, rpcmethod_ConfigGetDefault_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Config>* V1::Stub::PrepareAsyncConfigGetDefaultRaw(::grpc::ClientContext* context, const ::MurmurRPC::Void& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Config>::Create(channel_.get(), cq, rpcmethod_ConfigGetDefault_, context, request, false);
}

::grpc::Status V1::Stub::ChannelQuery(::grpc::ClientContext* context, const ::MurmurRPC::Channel_Query& request, ::MurmurRPC::Channel_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChannelQuery_, context, request, response);
}

void V1::Stub::experimental_async::ChannelQuery(::grpc::ClientContext* context, const ::MurmurRPC::Channel_Query* request, ::MurmurRPC::Channel_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelQuery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel_List>* V1::Stub::AsyncChannelQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel_List>::Create(channel_.get(), cq, rpcmethod_ChannelQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel_List>* V1::Stub::PrepareAsyncChannelQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel_List>::Create(channel_.get(), cq, rpcmethod_ChannelQuery_, context, request, false);
}

::grpc::Status V1::Stub::ChannelGet(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::MurmurRPC::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChannelGet_, context, request, response);
}

void V1::Stub::experimental_async::ChannelGet(::grpc::ClientContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Channel* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel>* V1::Stub::AsyncChannelGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel>::Create(channel_.get(), cq, rpcmethod_ChannelGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel>* V1::Stub::PrepareAsyncChannelGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel>::Create(channel_.get(), cq, rpcmethod_ChannelGet_, context, request, false);
}

::grpc::Status V1::Stub::ChannelAdd(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::MurmurRPC::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChannelAdd_, context, request, response);
}

void V1::Stub::experimental_async::ChannelAdd(::grpc::ClientContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Channel* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelAdd_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel>* V1::Stub::AsyncChannelAddRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel>::Create(channel_.get(), cq, rpcmethod_ChannelAdd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel>* V1::Stub::PrepareAsyncChannelAddRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel>::Create(channel_.get(), cq, rpcmethod_ChannelAdd_, context, request, false);
}

::grpc::Status V1::Stub::ChannelRemove(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChannelRemove_, context, request, response);
}

void V1::Stub::experimental_async::ChannelRemove(::grpc::ClientContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncChannelRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ChannelRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncChannelRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ChannelRemove_, context, request, false);
}

::grpc::Status V1::Stub::ChannelUpdate(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::MurmurRPC::Channel* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChannelUpdate_, context, request, response);
}

void V1::Stub::experimental_async::ChannelUpdate(::grpc::ClientContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Channel* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelUpdate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel>* V1::Stub::AsyncChannelUpdateRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel>::Create(channel_.get(), cq, rpcmethod_ChannelUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Channel>* V1::Stub::PrepareAsyncChannelUpdateRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Channel>::Create(channel_.get(), cq, rpcmethod_ChannelUpdate_, context, request, false);
}

::grpc::Status V1::Stub::UserQuery(::grpc::ClientContext* context, const ::MurmurRPC::User_Query& request, ::MurmurRPC::User_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserQuery_, context, request, response);
}

void V1::Stub::experimental_async::UserQuery(::grpc::ClientContext* context, const ::MurmurRPC::User_Query* request, ::MurmurRPC::User_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserQuery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::User_List>* V1::Stub::AsyncUserQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::User_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::User_List>::Create(channel_.get(), cq, rpcmethod_UserQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::User_List>* V1::Stub::PrepareAsyncUserQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::User_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::User_List>::Create(channel_.get(), cq, rpcmethod_UserQuery_, context, request, false);
}

::grpc::Status V1::Stub::UserGet(::grpc::ClientContext* context, const ::MurmurRPC::User& request, ::MurmurRPC::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserGet_, context, request, response);
}

void V1::Stub::experimental_async::UserGet(::grpc::ClientContext* context, const ::MurmurRPC::User* request, ::MurmurRPC::User* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::User>* V1::Stub::AsyncUserGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::User>::Create(channel_.get(), cq, rpcmethod_UserGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::User>* V1::Stub::PrepareAsyncUserGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::User>::Create(channel_.get(), cq, rpcmethod_UserGet_, context, request, false);
}

::grpc::Status V1::Stub::UserUpdate(::grpc::ClientContext* context, const ::MurmurRPC::User& request, ::MurmurRPC::User* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserUpdate_, context, request, response);
}

void V1::Stub::experimental_async::UserUpdate(::grpc::ClientContext* context, const ::MurmurRPC::User* request, ::MurmurRPC::User* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserUpdate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::User>* V1::Stub::AsyncUserUpdateRaw(::grpc::ClientContext* context, const ::MurmurRPC::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::User>::Create(channel_.get(), cq, rpcmethod_UserUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::User>* V1::Stub::PrepareAsyncUserUpdateRaw(::grpc::ClientContext* context, const ::MurmurRPC::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::User>::Create(channel_.get(), cq, rpcmethod_UserUpdate_, context, request, false);
}

::grpc::Status V1::Stub::UserKick(::grpc::ClientContext* context, const ::MurmurRPC::User_Kick& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UserKick_, context, request, response);
}

void V1::Stub::experimental_async::UserKick(::grpc::ClientContext* context, const ::MurmurRPC::User_Kick* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UserKick_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncUserKickRaw(::grpc::ClientContext* context, const ::MurmurRPC::User_Kick& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_UserKick_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncUserKickRaw(::grpc::ClientContext* context, const ::MurmurRPC::User_Kick& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_UserKick_, context, request, false);
}

::grpc::Status V1::Stub::TreeQuery(::grpc::ClientContext* context, const ::MurmurRPC::Tree_Query& request, ::MurmurRPC::Tree* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TreeQuery_, context, request, response);
}

void V1::Stub::experimental_async::TreeQuery(::grpc::ClientContext* context, const ::MurmurRPC::Tree_Query* request, ::MurmurRPC::Tree* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_TreeQuery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Tree>* V1::Stub::AsyncTreeQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Tree_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Tree>::Create(channel_.get(), cq, rpcmethod_TreeQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Tree>* V1::Stub::PrepareAsyncTreeQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::Tree_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Tree>::Create(channel_.get(), cq, rpcmethod_TreeQuery_, context, request, false);
}

::grpc::Status V1::Stub::BansGet(::grpc::ClientContext* context, const ::MurmurRPC::Ban_Query& request, ::MurmurRPC::Ban_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BansGet_, context, request, response);
}

void V1::Stub::experimental_async::BansGet(::grpc::ClientContext* context, const ::MurmurRPC::Ban_Query* request, ::MurmurRPC::Ban_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BansGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Ban_List>* V1::Stub::AsyncBansGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Ban_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Ban_List>::Create(channel_.get(), cq, rpcmethod_BansGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Ban_List>* V1::Stub::PrepareAsyncBansGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Ban_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Ban_List>::Create(channel_.get(), cq, rpcmethod_BansGet_, context, request, false);
}

::grpc::Status V1::Stub::BansSet(::grpc::ClientContext* context, const ::MurmurRPC::Ban_List& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BansSet_, context, request, response);
}

void V1::Stub::experimental_async::BansSet(::grpc::ClientContext* context, const ::MurmurRPC::Ban_List* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BansSet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncBansSetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Ban_List& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_BansSet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncBansSetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Ban_List& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_BansSet_, context, request, false);
}

::grpc::Status V1::Stub::ACLGet(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::MurmurRPC::ACL_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ACLGet_, context, request, response);
}

void V1::Stub::experimental_async::ACLGet(::grpc::ClientContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::ACL_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ACLGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::ACL_List>* V1::Stub::AsyncACLGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::ACL_List>::Create(channel_.get(), cq, rpcmethod_ACLGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::ACL_List>* V1::Stub::PrepareAsyncACLGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::Channel& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::ACL_List>::Create(channel_.get(), cq, rpcmethod_ACLGet_, context, request, false);
}

::grpc::Status V1::Stub::ACLSet(::grpc::ClientContext* context, const ::MurmurRPC::ACL_List& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ACLSet_, context, request, response);
}

void V1::Stub::experimental_async::ACLSet(::grpc::ClientContext* context, const ::MurmurRPC::ACL_List* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ACLSet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncACLSetRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_List& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ACLSet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncACLSetRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_List& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ACLSet_, context, request, false);
}

::grpc::Status V1::Stub::ACLGetEffectivePermissions(::grpc::ClientContext* context, const ::MurmurRPC::ACL_Query& request, ::MurmurRPC::ACL* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ACLGetEffectivePermissions_, context, request, response);
}

void V1::Stub::experimental_async::ACLGetEffectivePermissions(::grpc::ClientContext* context, const ::MurmurRPC::ACL_Query* request, ::MurmurRPC::ACL* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ACLGetEffectivePermissions_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::ACL>* V1::Stub::AsyncACLGetEffectivePermissionsRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::ACL>::Create(channel_.get(), cq, rpcmethod_ACLGetEffectivePermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::ACL>* V1::Stub::PrepareAsyncACLGetEffectivePermissionsRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::ACL>::Create(channel_.get(), cq, rpcmethod_ACLGetEffectivePermissions_, context, request, false);
}

::grpc::Status V1::Stub::ACLAddTemporaryGroup(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ACLAddTemporaryGroup_, context, request, response);
}

void V1::Stub::experimental_async::ACLAddTemporaryGroup(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ACLAddTemporaryGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncACLAddTemporaryGroupRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ACLAddTemporaryGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncACLAddTemporaryGroupRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ACLAddTemporaryGroup_, context, request, false);
}

::grpc::Status V1::Stub::ACLRemoveTemporaryGroup(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ACLRemoveTemporaryGroup_, context, request, response);
}

void V1::Stub::experimental_async::ACLRemoveTemporaryGroup(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ACLRemoveTemporaryGroup_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncACLRemoveTemporaryGroupRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ACLRemoveTemporaryGroup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncACLRemoveTemporaryGroupRaw(::grpc::ClientContext* context, const ::MurmurRPC::ACL_TemporaryGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_ACLRemoveTemporaryGroup_, context, request, false);
}

::grpc::ClientReaderWriter< ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>* V1::Stub::AuthenticatorStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>::Create(channel_.get(), rpcmethod_AuthenticatorStream_, context);
}

::grpc::ClientAsyncReaderWriter< ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>* V1::Stub::AsyncAuthenticatorStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>::Create(channel_.get(), cq, rpcmethod_AuthenticatorStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>* V1::Stub::PrepareAsyncAuthenticatorStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>::Create(channel_.get(), cq, rpcmethod_AuthenticatorStream_, context, false, nullptr);
}

::grpc::Status V1::Stub::DatabaseUserQuery(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Query& request, ::MurmurRPC::DatabaseUser_List* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DatabaseUserQuery_, context, request, response);
}

void V1::Stub::experimental_async::DatabaseUserQuery(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Query* request, ::MurmurRPC::DatabaseUser_List* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DatabaseUserQuery_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser_List>* V1::Stub::AsyncDatabaseUserQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser_List>::Create(channel_.get(), cq, rpcmethod_DatabaseUserQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser_List>* V1::Stub::PrepareAsyncDatabaseUserQueryRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Query& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser_List>::Create(channel_.get(), cq, rpcmethod_DatabaseUserQuery_, context, request, false);
}

::grpc::Status V1::Stub::DatabaseUserGet(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::MurmurRPC::DatabaseUser* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DatabaseUserGet_, context, request, response);
}

void V1::Stub::experimental_async::DatabaseUserGet(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::DatabaseUser* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DatabaseUserGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser>* V1::Stub::AsyncDatabaseUserGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser>::Create(channel_.get(), cq, rpcmethod_DatabaseUserGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser>* V1::Stub::PrepareAsyncDatabaseUserGetRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser>::Create(channel_.get(), cq, rpcmethod_DatabaseUserGet_, context, request, false);
}

::grpc::Status V1::Stub::DatabaseUserUpdate(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DatabaseUserUpdate_, context, request, response);
}

void V1::Stub::experimental_async::DatabaseUserUpdate(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DatabaseUserUpdate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncDatabaseUserUpdateRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_DatabaseUserUpdate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncDatabaseUserUpdateRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_DatabaseUserUpdate_, context, request, false);
}

::grpc::Status V1::Stub::DatabaseUserRegister(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::MurmurRPC::DatabaseUser* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DatabaseUserRegister_, context, request, response);
}

void V1::Stub::experimental_async::DatabaseUserRegister(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::DatabaseUser* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DatabaseUserRegister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser>* V1::Stub::AsyncDatabaseUserRegisterRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser>::Create(channel_.get(), cq, rpcmethod_DatabaseUserRegister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser>* V1::Stub::PrepareAsyncDatabaseUserRegisterRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser>::Create(channel_.get(), cq, rpcmethod_DatabaseUserRegister_, context, request, false);
}

::grpc::Status V1::Stub::DatabaseUserDeregister(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DatabaseUserDeregister_, context, request, response);
}

void V1::Stub::experimental_async::DatabaseUserDeregister(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DatabaseUserDeregister_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncDatabaseUserDeregisterRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_DatabaseUserDeregister_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncDatabaseUserDeregisterRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_DatabaseUserDeregister_, context, request, false);
}

::grpc::Status V1::Stub::DatabaseUserVerify(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Verify& request, ::MurmurRPC::DatabaseUser* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DatabaseUserVerify_, context, request, response);
}

void V1::Stub::experimental_async::DatabaseUserVerify(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Verify* request, ::MurmurRPC::DatabaseUser* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DatabaseUserVerify_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser>* V1::Stub::AsyncDatabaseUserVerifyRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Verify& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser>::Create(channel_.get(), cq, rpcmethod_DatabaseUserVerify_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::DatabaseUser>* V1::Stub::PrepareAsyncDatabaseUserVerifyRaw(::grpc::ClientContext* context, const ::MurmurRPC::DatabaseUser_Verify& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::DatabaseUser>::Create(channel_.get(), cq, rpcmethod_DatabaseUserVerify_, context, request, false);
}

::grpc::Status V1::Stub::RedirectWhisperGroupAdd(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RedirectWhisperGroupAdd_, context, request, response);
}

void V1::Stub::experimental_async::RedirectWhisperGroupAdd(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RedirectWhisperGroupAdd_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncRedirectWhisperGroupAddRaw(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_RedirectWhisperGroupAdd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncRedirectWhisperGroupAddRaw(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_RedirectWhisperGroupAdd_, context, request, false);
}

::grpc::Status V1::Stub::RedirectWhisperGroupRemove(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup& request, ::MurmurRPC::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RedirectWhisperGroupRemove_, context, request, response);
}

void V1::Stub::experimental_async::RedirectWhisperGroupRemove(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup* request, ::MurmurRPC::Void* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RedirectWhisperGroupRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::AsyncRedirectWhisperGroupRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_RedirectWhisperGroupRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::MurmurRPC::Void>* V1::Stub::PrepareAsyncRedirectWhisperGroupRemoveRaw(::grpc::ClientContext* context, const ::MurmurRPC::RedirectWhisperGroup& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::MurmurRPC::Void>::Create(channel_.get(), cq, rpcmethod_RedirectWhisperGroupRemove_, context, request, false);
}

V1::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Void, ::MurmurRPC::Uptime>(
          std::mem_fn(&V1::Service::GetUptime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Void, ::MurmurRPC::Version>(
          std::mem_fn(&V1::Service::GetVersion), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< V1::Service, ::MurmurRPC::Void, ::MurmurRPC::Event>(
          std::mem_fn(&V1::Service::Events), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Void, ::MurmurRPC::Server>(
          std::mem_fn(&V1::Service::ServerCreate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Server_Query, ::MurmurRPC::Server_List>(
          std::mem_fn(&V1::Service::ServerQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Server, ::MurmurRPC::Server>(
          std::mem_fn(&V1::Service::ServerGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Server, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ServerStart), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Server, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ServerStop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Server, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ServerRemove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< V1::Service, ::MurmurRPC::Server, ::MurmurRPC::Server_Event>(
          std::mem_fn(&V1::Service::ServerEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::ContextAction, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ContextActionAdd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::ContextAction, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ContextActionRemove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< V1::Service, ::MurmurRPC::ContextAction, ::MurmurRPC::ContextAction>(
          std::mem_fn(&V1::Service::ContextActionEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::TextMessage, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::TextMessageSend), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[14],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< V1::Service, ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>(
          std::mem_fn(&V1::Service::TextMessageFilter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Log_Query, ::MurmurRPC::Log_List>(
          std::mem_fn(&V1::Service::LogQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Server, ::MurmurRPC::Config>(
          std::mem_fn(&V1::Service::ConfigGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Config_Field, ::MurmurRPC::Config_Field>(
          std::mem_fn(&V1::Service::ConfigGetField), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Config_Field, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ConfigSetField), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Void, ::MurmurRPC::Config>(
          std::mem_fn(&V1::Service::ConfigGetDefault), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Channel_Query, ::MurmurRPC::Channel_List>(
          std::mem_fn(&V1::Service::ChannelQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Channel, ::MurmurRPC::Channel>(
          std::mem_fn(&V1::Service::ChannelGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Channel, ::MurmurRPC::Channel>(
          std::mem_fn(&V1::Service::ChannelAdd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Channel, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ChannelRemove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Channel, ::MurmurRPC::Channel>(
          std::mem_fn(&V1::Service::ChannelUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::User_Query, ::MurmurRPC::User_List>(
          std::mem_fn(&V1::Service::UserQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::User, ::MurmurRPC::User>(
          std::mem_fn(&V1::Service::UserGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::User, ::MurmurRPC::User>(
          std::mem_fn(&V1::Service::UserUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::User_Kick, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::UserKick), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Tree_Query, ::MurmurRPC::Tree>(
          std::mem_fn(&V1::Service::TreeQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Ban_Query, ::MurmurRPC::Ban_List>(
          std::mem_fn(&V1::Service::BansGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Ban_List, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::BansSet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::Channel, ::MurmurRPC::ACL_List>(
          std::mem_fn(&V1::Service::ACLGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::ACL_List, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ACLSet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::ACL_Query, ::MurmurRPC::ACL>(
          std::mem_fn(&V1::Service::ACLGetEffectivePermissions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::ACL_TemporaryGroup, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ACLAddTemporaryGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::ACL_TemporaryGroup, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::ACLRemoveTemporaryGroup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[37],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< V1::Service, ::MurmurRPC::Authenticator_Response, ::MurmurRPC::Authenticator_Request>(
          std::mem_fn(&V1::Service::AuthenticatorStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::DatabaseUser_Query, ::MurmurRPC::DatabaseUser_List>(
          std::mem_fn(&V1::Service::DatabaseUserQuery), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::DatabaseUser, ::MurmurRPC::DatabaseUser>(
          std::mem_fn(&V1::Service::DatabaseUserGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::DatabaseUser, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::DatabaseUserUpdate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::DatabaseUser, ::MurmurRPC::DatabaseUser>(
          std::mem_fn(&V1::Service::DatabaseUserRegister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::DatabaseUser, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::DatabaseUserDeregister), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::DatabaseUser_Verify, ::MurmurRPC::DatabaseUser>(
          std::mem_fn(&V1::Service::DatabaseUserVerify), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::RedirectWhisperGroup, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::RedirectWhisperGroupAdd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      V1_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< V1::Service, ::MurmurRPC::RedirectWhisperGroup, ::MurmurRPC::Void>(
          std::mem_fn(&V1::Service::RedirectWhisperGroupRemove), this)));
}

V1::Service::~Service() {
}

::grpc::Status V1::Service::GetUptime(::grpc::ServerContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Uptime* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::GetVersion(::grpc::ServerContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Version* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::Events(::grpc::ServerContext* context, const ::MurmurRPC::Void* request, ::grpc::ServerWriter< ::MurmurRPC::Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerCreate(::grpc::ServerContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerQuery(::grpc::ServerContext* context, const ::MurmurRPC::Server_Query* request, ::MurmurRPC::Server_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerGet(::grpc::ServerContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Server* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerStart(::grpc::ServerContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerStop(::grpc::ServerContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerRemove(::grpc::ServerContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ServerEvents(::grpc::ServerContext* context, const ::MurmurRPC::Server* request, ::grpc::ServerWriter< ::MurmurRPC::Server_Event>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ContextActionAdd(::grpc::ServerContext* context, const ::MurmurRPC::ContextAction* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ContextActionRemove(::grpc::ServerContext* context, const ::MurmurRPC::ContextAction* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ContextActionEvents(::grpc::ServerContext* context, const ::MurmurRPC::ContextAction* request, ::grpc::ServerWriter< ::MurmurRPC::ContextAction>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::TextMessageSend(::grpc::ServerContext* context, const ::MurmurRPC::TextMessage* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::TextMessageFilter(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::MurmurRPC::TextMessage_Filter, ::MurmurRPC::TextMessage_Filter>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::LogQuery(::grpc::ServerContext* context, const ::MurmurRPC::Log_Query* request, ::MurmurRPC::Log_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ConfigGet(::grpc::ServerContext* context, const ::MurmurRPC::Server* request, ::MurmurRPC::Config* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ConfigGetField(::grpc::ServerContext* context, const ::MurmurRPC::Config_Field* request, ::MurmurRPC::Config_Field* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ConfigSetField(::grpc::ServerContext* context, const ::MurmurRPC::Config_Field* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ConfigGetDefault(::grpc::ServerContext* context, const ::MurmurRPC::Void* request, ::MurmurRPC::Config* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ChannelQuery(::grpc::ServerContext* context, const ::MurmurRPC::Channel_Query* request, ::MurmurRPC::Channel_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ChannelGet(::grpc::ServerContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ChannelAdd(::grpc::ServerContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ChannelRemove(::grpc::ServerContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ChannelUpdate(::grpc::ServerContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::Channel* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::UserQuery(::grpc::ServerContext* context, const ::MurmurRPC::User_Query* request, ::MurmurRPC::User_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::UserGet(::grpc::ServerContext* context, const ::MurmurRPC::User* request, ::MurmurRPC::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::UserUpdate(::grpc::ServerContext* context, const ::MurmurRPC::User* request, ::MurmurRPC::User* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::UserKick(::grpc::ServerContext* context, const ::MurmurRPC::User_Kick* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::TreeQuery(::grpc::ServerContext* context, const ::MurmurRPC::Tree_Query* request, ::MurmurRPC::Tree* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::BansGet(::grpc::ServerContext* context, const ::MurmurRPC::Ban_Query* request, ::MurmurRPC::Ban_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::BansSet(::grpc::ServerContext* context, const ::MurmurRPC::Ban_List* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ACLGet(::grpc::ServerContext* context, const ::MurmurRPC::Channel* request, ::MurmurRPC::ACL_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ACLSet(::grpc::ServerContext* context, const ::MurmurRPC::ACL_List* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ACLGetEffectivePermissions(::grpc::ServerContext* context, const ::MurmurRPC::ACL_Query* request, ::MurmurRPC::ACL* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ACLAddTemporaryGroup(::grpc::ServerContext* context, const ::MurmurRPC::ACL_TemporaryGroup* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::ACLRemoveTemporaryGroup(::grpc::ServerContext* context, const ::MurmurRPC::ACL_TemporaryGroup* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::AuthenticatorStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::MurmurRPC::Authenticator_Request, ::MurmurRPC::Authenticator_Response>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::DatabaseUserQuery(::grpc::ServerContext* context, const ::MurmurRPC::DatabaseUser_Query* request, ::MurmurRPC::DatabaseUser_List* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::DatabaseUserGet(::grpc::ServerContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::DatabaseUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::DatabaseUserUpdate(::grpc::ServerContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::DatabaseUserRegister(::grpc::ServerContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::DatabaseUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::DatabaseUserDeregister(::grpc::ServerContext* context, const ::MurmurRPC::DatabaseUser* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::DatabaseUserVerify(::grpc::ServerContext* context, const ::MurmurRPC::DatabaseUser_Verify* request, ::MurmurRPC::DatabaseUser* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::RedirectWhisperGroupAdd(::grpc::ServerContext* context, const ::MurmurRPC::RedirectWhisperGroup* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status V1::Service::RedirectWhisperGroupRemove(::grpc::ServerContext* context, const ::MurmurRPC::RedirectWhisperGroup* request, ::MurmurRPC::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MurmurRPC

